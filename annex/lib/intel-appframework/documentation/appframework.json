[
  {
    "tags": [
      {
        "type": "author",
        "string": "Intel"
      },
      {
        "type": "copyright",
        "string": "Intel"
      },
      {
        "type": "api",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "<p>App Framwork  query selector class for HTML5 mobile apps on a WebkitBrowser.<br />Since most mobile devices (Android, iOS, webOS) use a WebKit browser, you only need to target one browser.<br />We are able to increase the speed greatly by removing support for legacy desktop browsers and taking advantage of browser features, like native JSON parsing and querySelectorAll</p>\n\n<p>MIT License</p>",
      "summary": "<p>App Framwork  query selector class for HTML5 mobile apps on a WebkitBrowser.<br />Since most mobile devices (Android, iOS, webOS) use a WebKit browser, you only need to target one browser.<br />We are able to increase the speed greatly by removing support for legacy desktop browsers and taking advantage of browser features, like native JSON parsing and querySelectorAll</p>",
      "body": "<p>MIT License</p>"
    },
    "isPrivate": true,
    "ignore": false
  },
  {
    "tags": [],
    "description": {
      "full": "<p>jshint eqeqeq:false</p>",
      "summary": "<p>jshint eqeqeq:false</p>",
      "body": ""
    },
    "ignore": false
  },
  {
    "tags": [],
    "description": {
      "full": "<p>global af: true</p>",
      "summary": "<p>global af: true</p>",
      "body": ""
    },
    "ignore": false,
    "code": "if (!window.af || typeof(af) !== \"function\") {"
  },
  {
    "tags": [
      {
        "type": "title",
        "string": "appframework"
      },
      {
        "type": "api",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "<p>This is our master af object that everything is built upon.<br />$ is a pointer to this object</p>",
      "summary": "<p>This is our master af object that everything is built upon.<br />$ is a pointer to this object</p>",
      "body": ""
    },
    "isPrivate": true,
    "ignore": false,
    "code": "var af = (function(window) {\n        \"use strict\";\n        var nundefined, document = window.document,\n            emptyArray = [],\n            slice = emptyArray.slice,\n            classCache = {},\n            eventHandlers = [],\n            _eventID = 1,\n            jsonPHandlers = [],\n            _jsonPID = 1,\n            fragmentRE = /<(\\w+)[^>]*>/,\n            classSelectorRE = /^\\.([\\w-]+)$/,\n            tagSelectorRE = /^[\\w-]+$/,\n            _attrCache = {},\n            _propCache = {},\n            cssNumber = {\n                \"columncount\": true,\n                \"fontweight\": true,\n                \"lineheight\": true,\n                \"column-count\": true,\n                \"font-weight\": true,\n                \"line-height\": true,\n                \"opacity\": true,\n                \"orphans\": true,\n                \"widows\": true,\n                \"zIndex\": true,\n                \"z-index\": true,\n                \"zoom\": true\n            },\n            isWin8 = (typeof(MSApp) === \"object\");",
    "ctx": {
      "type": "declaration",
      "name": "af",
      "value": "(function(window) {",
      "string": "af"
    }
  },
  {
    "tags": [
      {
        "type": "api",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "<p>internal function used for $().css - checks to see if it is a number and the css property<br />needs \"px\" added to it</p>",
      "summary": "<p>internal function used for $().css - checks to see if it is a number and the css property<br />needs \"px\" added to it</p>",
      "body": ""
    },
    "isPrivate": true,
    "ignore": false,
    "code": "function _addPx(prop, val) {\n            return (typeof(val) === \"number\") && !cssNumber[prop.toLowerCase()] ? val + \"px\" : val;\n        }",
    "ctx": {
      "type": "function",
      "name": "_addPx",
      "string": "_addPx()"
    }
  },
  {
    "tags": [
      {
        "type": "api",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "<p>internal function to use domfragments for insertion</p>",
      "summary": "<p>internal function to use domfragments for insertion</p>",
      "body": ""
    },
    "isPrivate": true,
    "ignore": false,
    "code": "function _insertFragments(afm, container, insert) {\n            var frag = document.createDocumentFragment();\n            if (insert) {\n                for (var j = afm.length - 1; j >= 0; j--) {\n                    frag.insertBefore(afm[j], frag.firstChild);\n                }\n                container.insertBefore(frag, container.firstChild);\n\n            } else {\n\n                for (var k = 0; k < afm.length; k++)\n                    frag.appendChild(afm[k]);\n                container.appendChild(frag);\n            }\n            frag = null;\n        }",
    "ctx": {
      "type": "function",
      "name": "_insertFragments",
      "string": "_insertFragments()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "String"
        ],
        "name": "name",
        "description": "to search against"
      },
      {
        "type": "return",
        "types": [
          "Boolean"
        ],
        "description": ""
      },
      {
        "type": "api",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "<p>Internal function to test if a class name fits in a regular expression</p>",
      "summary": "<p>Internal function to test if a class name fits in a regular expression</p>",
      "body": ""
    },
    "isPrivate": true,
    "ignore": false,
    "code": "function classRE(name) {\n            return name in classCache ? classCache[name] : (classCache[name] = new RegExp(\"(^|\\\\s)\" + name + \"(\\\\s|$)\"));\n        }",
    "ctx": {
      "type": "function",
      "name": "classRE",
      "string": "classRE()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "Array"
        ],
        "name": "arr",
        "description": "array to compare against"
      },
      {
        "type": "return",
        "types": [
          "Array"
        ],
        "description": "array of unique elements"
      },
      {
        "type": "api",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "<p>Internal function that returns a array of unique elements</p>",
      "summary": "<p>Internal function that returns a array of unique elements</p>",
      "body": ""
    },
    "isPrivate": true,
    "ignore": false,
    "code": "function unique(arr) {\n            for (var i = 0; i < arr.length; i++) {\n                if (arr.indexOf(arr[i]) !== i) {\n                    arr.splice(i, 1);\n                    i--;\n                }\n            }\n            return arr;\n        }",
    "ctx": {
      "type": "function",
      "name": "unique",
      "string": "unique()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "Nodelist"
        ],
        "name": "Node",
        "description": "list to search"
      },
      {
        "type": "param",
        "types": [
          "Object"
        ],
        "name": "[element]",
        "description": "to find siblings off of"
      },
      {
        "type": "return",
        "types": [
          "Array"
        ],
        "description": "array of sibblings"
      },
      {
        "type": "api",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "<p>Given a set of nodes, it returns them as an array.  Used to find<br />siblings of an element</p>",
      "summary": "<p>Given a set of nodes, it returns them as an array.  Used to find<br />siblings of an element</p>",
      "body": ""
    },
    "isPrivate": true,
    "ignore": false,
    "code": "function siblings(nodes, element) {\n            var elems = [];\n            if (nodes == nundefined)\n                return elems;\n\n            for (; nodes; nodes = nodes.nextSibling) {\n                if (nodes.nodeType === 1 && nodes !== element) {\n                    elems.push(nodes);\n                }\n            }\n            return elems;\n        }",
    "ctx": {
      "type": "function",
      "name": "siblings",
      "string": "siblings()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "String",
          "Element",
          "Object",
          "Array"
        ],
        "name": "selector",
        "description": ""
      },
      {
        "type": "param",
        "types": [
          "String",
          "Element",
          "Object"
        ],
        "name": "[context]",
        "description": ""
      },
      {
        "type": "api",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "<p>This is the internal appframework object that gets extended and added on to it<br />This is also the start of our query selector engine</p>",
      "summary": "<p>This is the internal appframework object that gets extended and added on to it<br />This is also the start of our query selector engine</p>",
      "body": ""
    },
    "isPrivate": true,
    "ignore": false,
    "code": "var $afm = function(toSelect, what) {\n            this.length = 0;\n            if (!toSelect) {\n                return this;\n            } else if (toSelect instanceof $afm && what == nundefined) {\n                return toSelect;\n            } else if (af.isFunction(toSelect)) {\n                return af(document).ready(toSelect);\n            } else if (af.isArray(toSelect) && toSelect.length != nundefined) { //Passing in an array or object\n                for (var i = 0; i < toSelect.length; i++)\n                    this[this.length++] = toSelect[i];\n                return this;\n            } else if (af.isObject(toSelect) && af.isObject(what)) { //var tmp=$(\"span\");  $(\"p\").find(tmp);\n                if (toSelect.length == nundefined) {\n                    if (toSelect.parentNode == what)\n                        this[this.length++] = toSelect;\n                } else {\n                    for (var j = 0; j < toSelect.length; j++)\n                        if (toSelect[j].parentNode == what)\n                            this[this.length++] = toSelect[j];\n                }\n                return this;\n            } else if (af.isObject(toSelect) && what == nundefined) { //Single object\n                this[this.length++] = toSelect;\n                return this;\n            } else if (what !== nundefined) {\n                if (what instanceof $afm) {\n                    return what.find(toSelect);\n                }\n\n            } else {\n                what = document;\n            }\n\n            return this.selector(toSelect, what);\n\n        };"
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "String",
          "Element",
          "Object",
          "Array"
        ],
        "name": "selector",
        "description": ""
      },
      {
        "type": "param",
        "types": [
          "String",
          "Element",
          "Object"
        ],
        "name": "[context]",
        "description": ""
      },
      {
        "type": "title",
        "string": "$()"
      },
      {
        "type": "return",
        "types": [
          "Object"
        ],
        "description": "an appframework object"
      }
    ],
    "description": {
      "full": "<p>This calls the $afm function</p>",
      "summary": "<p>This calls the $afm function</p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "var $ = function(selector, what) {\n            return new $afm(selector, what);\n        };"
  },
  {
    "tags": [
      {
        "type": "api",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "<p>this is the engine for \"all\" and is only exposed internally</p>",
      "summary": "<p>this is the engine for \"all\" and is only exposed internally</p>",
      "body": ""
    },
    "isPrivate": true,
    "ignore": false,
    "code": "function _selectorAll(selector, what) {\n            try {\n                return what.querySelectorAll(selector);\n\n            } catch (e) {\n                return [];\n            }\n        }",
    "ctx": {
      "type": "function",
      "name": "_selectorAll",
      "string": "_selectorAll()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "String"
        ],
        "name": "selector",
        "description": ""
      },
      {
        "type": "param",
        "types": [
          "String",
          "Element",
          "Object"
        ],
        "name": "[context]",
        "description": ""
      },
      {
        "type": "api",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "<p>this is the query selector engine for elements</p>",
      "summary": "<p>this is the query selector engine for elements</p>",
      "body": ""
    },
    "isPrivate": true,
    "ignore": false,
    "code": "function _selector(selector, what) {",
    "ctx": {
      "type": "function",
      "name": "_selector",
      "string": "_selector()"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<p>shint validthis:true</p>",
      "summary": "<p>shint validthis:true</p>",
      "body": ""
    },
    "ignore": false,
    "code": "selector = selector.trim();\n\n            if (selector[0] === \"#\" && selector.indexOf(\".\") === -1 &&selector.indexOf(\",\") === -1 && selector.indexOf(\" \") === -1 && selector.indexOf(\">\") === -1) {\n                if (what === document)\n                    _shimNodes(what.getElementById(selector.replace(\"#\", \"\")), this);\n                else\n                    _shimNodes(_selectorAll(selector, what), this);\n            } else if ((selector[0] === \"<\" && selector[selector.length - 1] === \">\") || (selector.indexOf(\"<\") !== -1 && selector.indexOf(\">\") !== -1)) //html\n\n            {\n                var tmp = document.createElement(\"div\");\n                if (isWin8) {\n                    MSApp.execUnsafeLocalFunction(function() {\n                        tmp.innerHTML = selector.trim();\n                    });\n                } else\n                    tmp.innerHTML = selector.trim();\n                _shimNodes(tmp.childNodes, this);\n            } else {\n                _shimNodes((_selectorAll(selector, what)), this);\n            }\n            return this;\n        }\n\n        function _shimNodes(nodes, obj) {\n            if (!nodes)\n                return;\n            if (nodes.nodeType) {\n                obj[obj.length++] = nodes;\n                return;\n            }\n            for (var i = 0, iz = nodes.length; i < iz; i++)\n                obj[obj.length++] = nodes[i];\n        }"
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "Object"
        ],
        "name": "element",
        "description": ""
      },
      {
        "type": "return",
        "types": [
          "Boolean"
        ],
        "description": ""
      },
      {
        "type": "title",
        "string": "$.is$(param)"
      }
    ],
    "description": {
      "full": "<p>Checks to see if the parameter is a $afm object<br />            <div class=\"highlight\"><pre lang=\"\">            var foo=$(\"#header\");<br />            $.is$(foo);<br />            </pre></div></p>",
      "summary": "<p>Checks to see if the parameter is a $afm object<br />            <div class=\"highlight\"><pre lang=\"\">            var foo=$(\"#header\");<br />            $.is$(foo);<br />            </pre></div></p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "$.is$ = function(obj) {\n            return obj instanceof $afm;\n        };"
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "Array",
          "Object"
        ],
        "name": "elements",
        "description": ""
      },
      {
        "type": "param",
        "types": [
          "Function"
        ],
        "name": "callback",
        "description": ""
      },
      {
        "type": "return",
        "types": [
          "array"
        ],
        "description": "array with elements"
      },
      {
        "type": "title",
        "string": "$.map(elements,callback)"
      }
    ],
    "description": {
      "full": "<p>Map takes in elements and executes a callback function on each and returns a collection<br />        <div class=\"highlight\"><pre lang=\"\">        $.map([1,2],function(ind){return ind+1});<br />        </pre></div></p>",
      "summary": "<p>Map takes in elements and executes a callback function on each and returns a collection<br />        <div class=\"highlight\"><pre lang=\"\">        $.map([1,2],function(ind){return ind+1});<br />        </pre></div></p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "$.map = function(elements, callback) {\n            var value, values = [],\n                i, key;\n            if ($.isArray(elements)){\n\n                for (i = 0; i < elements.length; i++) {\n                    value = callback.apply(elements[i],[elements[i],i]);\n                    if (value !== nundefined)\n                        values.push(value);\n                }\n            } else if ($.isObject(elements)){\n                for (key in elements) {\n                    if (!elements.hasOwnProperty(key) || key === \"length\")\n                        continue;\n                    value = callback(elements[key],[elements[key],key]);\n                    if (value !== nundefined)\n                        values.push(value);\n                }\n            }\n            return values;\n        };"
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "Array",
          "Object"
        ],
        "name": "elements",
        "description": ""
      },
      {
        "type": "param",
        "types": [
          "Function"
        ],
        "name": "callback",
        "description": ""
      },
      {
        "type": "return",
        "types": [
          "Array"
        ],
        "description": "elements"
      },
      {
        "type": "title",
        "string": "$.each(elements,callback)"
      }
    ],
    "description": {
      "full": "<p>Iterates through elements and executes a callback.  Returns if false<br />        <div class=\"highlight\"><pre lang=\"\">        $.each([1,2],function(ind){console.log(ind);});<br />        </pre></div></p>",
      "summary": "<p>Iterates through elements and executes a callback.  Returns if false<br />        <div class=\"highlight\"><pre lang=\"\">        $.each([1,2],function(ind){console.log(ind);});<br />        </pre></div></p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "$.each = function(elements, callback) {\n            var i, key;\n            if ($.isArray(elements)){\n                for (i = 0; i < elements.length; i++) {\n                    if (callback(i, elements[i]) === false)\n                        return elements;\n                }\n            } else if ($.isObject(elements)){\n                for (key in elements) {\n                    if (!elements.hasOwnProperty(key) || key === \"length\")\n                        continue;\n                    if (callback(key, elements[key]) === false)\n                        return elements;\n                }\n            }\n            return elements;\n        };"
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "Object"
        ],
        "name": "[target]",
        "description": "element"
      },
      {
        "type": "param",
        "types": [
          "any"
        ],
        "name": "number",
        "description": "of additional arguments"
      },
      {
        "type": "return",
        "types": [
          "Object"
        ],
        "description": "[target]"
      },
      {
        "type": "title",
        "string": "$.extend(target,{params})"
      }
    ],
    "description": {
      "full": "<p>Extends an object with additional arguments<br />            <div class=\"highlight\"><pre lang=\"\">            $.extend({foo:\"bar\"});<br />            $.extend(element,{foo:\"bar\"});<br />            </pre></div></p>",
      "summary": "<p>Extends an object with additional arguments<br />            <div class=\"highlight\"><pre lang=\"\">            $.extend({foo:\"bar\"});<br />            $.extend(element,{foo:\"bar\"});<br />            </pre></div></p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "$.extend = function(target) {\n            if (target == nundefined)\n                target = this;\n            if (arguments.length === 1) {\n                for (var key in target)\n                    this[key] = target[key];\n                return this;\n            } else {\n                slice.call(arguments, 1).forEach(function(source) {\n                    for (var key in source)\n                        target[key] = source[key];\n                });\n            }\n            return target;\n        };"
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "Object"
        ],
        "name": "element",
        "description": ""
      },
      {
        "type": "return",
        "types": [
          "Boolean"
        ],
        "description": ""
      },
      {
        "type": "example",
        "string": "$.isArray([1]);"
      },
      {
        "type": "title",
        "string": "$.isArray(param)"
      }
    ],
    "description": {
      "full": "<p>Checks to see if the parameter is an array<br />            <div class=\"highlight\"><pre lang=\"\">            var arr=[];<br />            $.isArray(arr);<br />            </pre></div></p>",
      "summary": "<p>Checks to see if the parameter is an array<br />            <div class=\"highlight\"><pre lang=\"\">            var arr=[];<br />            $.isArray(arr);<br />            </pre></div></p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "$.isArray = function(obj) {\n            return obj instanceof Array && obj.push != nundefined; //ios 3.1.3 doesn\"t have Array.isArray\n        };"
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "Object"
        ],
        "name": "element",
        "description": ""
      },
      {
        "type": "return",
        "types": [
          "Boolean"
        ],
        "description": ""
      },
      {
        "type": "title",
        "string": "$.isFunction(param)"
      }
    ],
    "description": {
      "full": "<p>Checks to see if the parameter is a function<br />            <div class=\"highlight\"><pre lang=\"\">            var func=function(){};<br />            $.isFunction(func);<br />            </pre></div></p>",
      "summary": "<p>Checks to see if the parameter is a function<br />            <div class=\"highlight\"><pre lang=\"\">            var func=function(){};<br />            $.isFunction(func);<br />            </pre></div></p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "$.isFunction = function(obj) {\n            return typeof obj === \"function\" && !(obj instanceof RegExp);\n        };"
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "Object"
        ],
        "name": "element",
        "description": ""
      },
      {
        "type": "return",
        "types": [
          "Boolean"
        ],
        "description": ""
      },
      {
        "type": "title",
        "string": "$.isObject(param)"
      }
    ],
    "description": {
      "full": "<p>Checks to see if the parameter is a object<br />            <div class=\"highlight\"><pre lang=\"\">            var foo={bar:\"bar\"};<br />            $.isObject(foo);<br />            </pre></div></p>",
      "summary": "<p>Checks to see if the parameter is a object<br />            <div class=\"highlight\"><pre lang=\"\">            var foo={bar:\"bar\"};<br />            $.isObject(foo);<br />            </pre></div></p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "$.isObject = function(obj) {\n            return typeof obj === \"object\" && obj !== null;\n        };"
  },
  {
    "tags": [],
    "description": {
      "full": "<p>Prototype for afm object.  Also extens $.fn</p>",
      "summary": "<p>Prototype for afm object.  Also extens $.fn</p>",
      "body": ""
    },
    "ignore": false,
    "code": "$.fn = $afm.prototype = {\n            namepsace:\"appframework\",\n            constructor: $afm,\n            forEach: emptyArray.forEach,\n            reduce: emptyArray.reduce,\n            push: emptyArray.push,\n            indexOf: emptyArray.indexOf,\n            concat: emptyArray.concat,\n            selector: _selector,\n            oldElement: undefined,\n            slice: emptyArray.slice,\n            length: 0,"
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "Object"
        ],
        "name": "params",
        "description": ""
      },
      {
        "type": "return",
        "types": [
          "Object"
        ],
        "description": "an appframework with params.oldElement set to this"
      },
      {
        "type": "api",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "<p>This is a utility function for .end()</p>",
      "summary": "<p>This is a utility function for .end()</p>",
      "body": ""
    },
    "isPrivate": true,
    "ignore": false,
    "code": "setupOld: function(params) {\n                if (params == nundefined)\n                    return $();\n                params.oldElement = this;\n                return params;\n\n            },"
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "Function"
        ],
        "name": "callback",
        "description": ""
      },
      {
        "type": "return",
        "types": [
          "Object"
        ],
        "description": "an appframework object"
      },
      {
        "type": "title",
        "string": "$().map(function)"
      }
    ],
    "description": {
      "full": "<p>This is a wrapper to $.map on the selected elements<br />                <div class=\"highlight\"><pre lang=\"\">                $().map(function(){this.value+=ind});<br />                </pre></div></p>",
      "summary": "<p>This is a wrapper to $.map on the selected elements<br />                <div class=\"highlight\"><pre lang=\"\">                $().map(function(){this.value+=ind});<br />                </pre></div></p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "map: function(fn) {\n                var value, values = [],\n                    i;\n                for (i = 0; i < this.length; i++) {\n                    value = fn.apply(this[i],[i,this[i]]);\n                    if (value !== nundefined)\n                        values.push(value);\n                }\n                return $(values);\n            },"
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "Function"
        ],
        "name": "callback",
        "description": ""
      },
      {
        "type": "return",
        "types": [
          "Object"
        ],
        "description": "an appframework object"
      },
      {
        "type": "title",
        "string": "$().each(function)"
      }
    ],
    "description": {
      "full": "<p>Iterates through all elements and applys a callback function<br />                <div class=\"highlight\"><pre lang=\"\">                $().each(function(){console.log(this.value)});<br />                </pre></div></p>",
      "summary": "<p>Iterates through all elements and applys a callback function<br />                <div class=\"highlight\"><pre lang=\"\">                $().each(function(){console.log(this.value)});<br />                </pre></div></p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "each: function(callback) {\n                this.forEach(function(el, idx) {\n                    callback.call(el, idx, el);\n                });\n                return this;\n            },"
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "Function"
        ],
        "name": "callback",
        "description": ""
      },
      {
        "type": "return",
        "types": [
          "Object"
        ],
        "description": "an appframework object"
      },
      {
        "type": "title",
        "string": "$().ready(function)"
      }
    ],
    "description": {
      "full": "<p>This is executed when DOMContentLoaded happens, or after if you\"ve registered for it.<br />                <div class=\"highlight\"><pre lang=\"\">                $(document).ready(function(){console.log(\"I'm ready\");});<br />                </pre></div></p>",
      "summary": "<p>This is executed when DOMContentLoaded happens, or after if you\"ve registered for it.<br />                <div class=\"highlight\"><pre lang=\"\">                $(document).ready(function(){console.log(\"I'm ready\");});<br />                </pre></div></p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "ready: function(callback) {\n                if (document.readyState === \"complete\" || document.readyState === \"loaded\" || (!$.os.ie && document.readyState === \"interactive\")) //IE10 fires interactive too early\n                    callback();\n                else\n                    document.addEventListener(\"DOMContentLoaded\", callback, false);\n                return this;\n            },"
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "String",
          "Object",
          "Array"
        ],
        "name": "selector",
        "description": ""
      },
      {
        "type": "return",
        "types": [
          "Object"
        ],
        "description": "an appframework object filtered"
      },
      {
        "type": "title",
        "string": "$().find(selector)"
      }
    ],
    "description": {
      "full": "<p>Searches through the collection and reduces them to elements that match the selector<br />                <div class=\"highlight\"><pre lang=\"\">                $(\"#foo\").find(\".bar\");<br />                $(\"#foo\").find($(\".bar\"));<br />                $(\"#foo\").find($(\".bar\").get(0));<br />                </pre></div></p>",
      "summary": "<p>Searches through the collection and reduces them to elements that match the selector<br />                <div class=\"highlight\"><pre lang=\"\">                $(\"#foo\").find(\".bar\");<br />                $(\"#foo\").find($(\".bar\"));<br />                $(\"#foo\").find($(\".bar\").get(0));<br />                </pre></div></p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "find: function(sel) {\n                if (this.length === 0)\n                    return this;\n                var elems = [];\n                var tmpElems;\n                for (var i = 0; i < this.length; i++) {\n                    tmpElems = ($(sel, this[i]));\n\n                    for (var j = 0; j < tmpElems.length; j++) {\n                        elems.push(tmpElems[j]);\n                    }\n                }\n                return $(unique(elems));\n            },"
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "String"
        ],
        "name": "html",
        "description": "to set"
      },
      {
        "type": "param",
        "types": [
          "Bool"
        ],
        "name": "[cleanup]",
        "description": "- set to false for performance tests and if you do not want to execute memory management cleanup"
      },
      {
        "type": "return",
        "types": [
          "Object"
        ],
        "description": "an appframework object"
      },
      {
        "type": "title",
        "string": "$().html([html])"
      }
    ],
    "description": {
      "full": "<p>Gets or sets the innerHTML for the collection.<br />If used as a get, the first elements innerHTML is returned<br />                <div class=\"highlight\"><pre lang=\"\">                $(\"#foo\").html(); //gets the first elements html<br />                $(\"#foo\").html(\"new html\");//sets the html<br />                $(\"#foo\").html(\"new html\",false); //Do not do memory management cleanup<br />                </pre></div></p>",
      "summary": "<p>Gets or sets the innerHTML for the collection.<br />If used as a get, the first elements innerHTML is returned<br />                <div class=\"highlight\"><pre lang=\"\">                $(\"#foo\").html(); //gets the first elements html<br />                $(\"#foo\").html(\"new html\");//sets the html<br />                $(\"#foo\").html(\"new html\",false); //Do not do memory management cleanup<br />                </pre></div></p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "html: function(html, cleanup) {\n                var msFix=function(){\n                    item.innerHTML=html;\n                };\n                if (this.length === 0)\n                    return this;\n                if (html === nundefined)\n                    return this[0].innerHTML;\n\n                for (var i = 0; i < this.length; i++) {\n                    if (cleanup !== false)\n                        $.cleanUpContent(this[i], false, true);\n                    if (isWin8) {\n                        var item=this[i];\n                        MSApp.execUnsafeLocalFunction(msFix);\n                    } else\n                        this[i].innerHTML = html;\n                }\n                return this;\n            },"
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "String"
        ],
        "name": "text",
        "description": "to set"
      },
      {
        "type": "return",
        "types": [
          "Object"
        ],
        "description": "an appframework object"
      },
      {
        "type": "title",
        "string": "$().text([text])"
      }
    ],
    "description": {
      "full": "<p>Gets or sets the innerText for the collection.<br />If used as a get, the first elements innerText is returned<br />                <div class=\"highlight\"><pre lang=\"\">                $(\"#foo\").text(); //gets the first elements text;<br />                $(\"#foo\").text(\"new text\"); //sets the text<br />                </pre></div></p>",
      "summary": "<p>Gets or sets the innerText for the collection.<br />If used as a get, the first elements innerText is returned<br />                <div class=\"highlight\"><pre lang=\"\">                $(\"#foo\").text(); //gets the first elements text;<br />                $(\"#foo\").text(\"new text\"); //sets the text<br />                </pre></div></p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "text: function(text) {\n                if (this.length === 0)\n                    return this;\n                if (text === nundefined)\n                    return this[0].textContent;\n                for (var i = 0; i < this.length; i++) {\n                    this[i].textContent = text;\n                }\n                return this;\n            },"
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "String"
        ],
        "name": "attribute",
        "description": "The attribute to get"
      },
      {
        "type": "param",
        "types": [
          "String"
        ],
        "name": "value",
        "description": "Value to set as"
      },
      {
        "type": "return",
        "types": [
          "Object"
        ],
        "description": "obj An appframework object"
      },
      {
        "type": "title",
        "string": "$().css(attribute,[value])"
      }
    ],
    "description": {
      "full": "<p>Gets or sets a css property for the collection<br />If used as a get, the first elements css property is returned<br />This will add px to properties that need it.<br />                <div class=\"highlight\"><pre lang=\"\">                $().css(\"background\"); // Gets the first elements background<br />                $().css(\"background\",\"red\")  //Sets the elements background to red<br />                </pre></div></p>",
      "summary": "<p>Gets or sets a css property for the collection<br />If used as a get, the first elements css property is returned<br />This will add px to properties that need it.<br />                <div class=\"highlight\"><pre lang=\"\">                $().css(\"background\"); // Gets the first elements background<br />                $().css(\"background\",\"red\")  //Sets the elements background to red<br />                </pre></div></p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "css: function(attribute, value, obj) {\n                var toAct = obj != nundefined ? obj : this[0];\n                if (this.length === 0)\n                    return this;\n                if (value == nundefined && typeof(attribute) === \"string\") {\n                    var styles = window.getComputedStyle(toAct);\n                    return toAct.style[attribute] ? toAct.style[attribute] : window.getComputedStyle(toAct)[attribute];\n                }\n                for (var i = 0; i < this.length; i++) {\n                    if ($.isObject(attribute)) {\n                        for (var j in attribute) {\n                            this[i].style[j] = _addPx(j, attribute[j]);\n                        }\n                    } else {\n                        this[i].style[attribute] = _addPx(attribute, value);\n                    }\n                }\n                return this;\n            },"
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "String"
        ],
        "name": "attribute",
        "description": "to get"
      },
      {
        "type": "param",
        "types": [
          "String"
        ],
        "name": "value",
        "description": "to set as"
      },
      {
        "type": "return",
        "types": [
          "Object"
        ],
        "description": "an appframework object"
      },
      {
        "type": "title",
        "string": "$().vendorCss(attribute,[value])"
      }
    ],
    "description": {
      "full": "<p>Gets or sets css vendor specific css properties<br />If used as a get, the first elements css property is returned<br />                <div class=\"highlight\"><pre lang=\"\">                $().vendorCss(\"transform\"); // Gets the first elements background<br />                $().vendorCss(\"transform\",\"Translate3d(0,40,0)\")  //Sets the elements background to red<br />                </pre></div></p>",
      "summary": "<p>Gets or sets css vendor specific css properties<br />If used as a get, the first elements css property is returned<br />                <div class=\"highlight\"><pre lang=\"\">                $().vendorCss(\"transform\"); // Gets the first elements background<br />                $().vendorCss(\"transform\",\"Translate3d(0,40,0)\")  //Sets the elements background to red<br />                </pre></div></p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "vendorCss: function(attribute, value, obj) {\n                return this.css($.feat.cssPrefix + attribute, value, obj);\n            },"
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "String"
        ],
        "name": "Transform",
        "description": "values"
      },
      {
        "type": "return",
        "types": [
          "Object"
        ],
        "description": "an appframework object"
      },
      {
        "type": "title",
        "string": "$().cssTranslate(value)"
      }
    ],
    "description": {
      "full": "<p>Performs a css vendor specific transform:translate operation on the collection.<br />                <div class=\"highlight\"><pre lang=\"\">                $(\"#main\").cssTranslate(\"200px,0,0\");<br />                </pre></div></p>",
      "summary": "<p>Performs a css vendor specific transform:translate operation on the collection.<br />                <div class=\"highlight\"><pre lang=\"\">                $(\"#main\").cssTranslate(\"200px,0,0\");<br />                </pre></div></p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "cssTranslate: function(val) {\n                return this.vendorCss(\"Transform\", \"translate\" + $.feat.cssTransformStart + val + $.feat.cssTransformEnd);\n            },"
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "String"
        ],
        "name": "css",
        "description": "property"
      },
      {
        "type": "return",
        "types": [
          "Int",
          "String",
          "Float",
          ""
        ],
        "description": "css vlaue"
      },
      {
        "type": "title",
        "string": "$().computedStyle()"
      }
    ],
    "description": {
      "full": "<p>Gets the computed style of CSS values<br />                <div class=\"highlight\"><pre lang=\"\">               $(\"#main\").computedStyle(\"display\");<br />                </pre></div></p>",
      "summary": "<p>Gets the computed style of CSS values<br />                <div class=\"highlight\"><pre lang=\"\">               $(\"#main\").computedStyle(\"display\");<br />                </pre></div></p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "computedStyle: function(val) {\n                if (this.length === 0 || val == nundefined) return;\n                return window.getComputedStyle(this[0], \"\")[val];\n            },"
  },
  {
    "tags": [
      {
        "type": "return",
        "types": [
          "Object"
        ],
        "description": "an appframework object"
      },
      {
        "type": "title",
        "string": "$().empty()"
      }
    ],
    "description": {
      "full": "<p>Sets the innerHTML of all elements to an empty string<br />                <div class=\"highlight\"><pre lang=\"\">                $().empty();<br />                </pre></div></p>",
      "summary": "<p>Sets the innerHTML of all elements to an empty string<br />                <div class=\"highlight\"><pre lang=\"\">                $().empty();<br />                </pre></div></p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "empty: function() {\n                for (var i = 0; i < this.length; i++) {\n                    $.cleanUpContent(this[i], false, true);\n                    this[i].textContent = \"\";\n                }\n                return this;\n            },"
  },
  {
    "tags": [
      {
        "type": "return",
        "types": [
          "Object"
        ],
        "description": "an appframework object"
      },
      {
        "type": "title",
        "string": "$().hide()"
      }
    ],
    "description": {
      "full": "<p>Sets the elements display property to \"none\".<br />This will also store the old property into an attribute for hide<br />                <div class=\"highlight\"><pre lang=\"\">                $().hide();<br />                </pre></div></p>",
      "summary": "<p>Sets the elements display property to \"none\".<br />This will also store the old property into an attribute for hide<br />                <div class=\"highlight\"><pre lang=\"\">                $().hide();<br />                </pre></div></p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "hide: function() {\n                if (this.length === 0)\n                    return this;\n                for (var i = 0; i < this.length; i++) {\n                    if (this.css(\"display\", null, this[i]) !== \"none\") {\n                        this[i].setAttribute(\"afmOldStyle\", this.css(\"display\", null, this[i]));\n                        this[i].style.display = \"none\";\n                    }\n                }\n                return this;\n            },"
  },
  {
    "tags": [
      {
        "type": "return",
        "types": [
          "Object"
        ],
        "description": "an appframework object"
      },
      {
        "type": "title",
        "string": "$().show()"
      }
    ],
    "description": {
      "full": "<p>Shows all the elements by setting the css display property<br />We look to see if we were retaining an old style (like table-cell) and restore that, otherwise we set it to block<br />                <div class=\"highlight\"><pre lang=\"\">                $().show();<br />                </pre></div></p>",
      "summary": "<p>Shows all the elements by setting the css display property<br />We look to see if we were retaining an old style (like table-cell) and restore that, otherwise we set it to block<br />                <div class=\"highlight\"><pre lang=\"\">                $().show();<br />                </pre></div></p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "show: function() {\n                if (this.length === 0)\n                    return this;\n                for (var i = 0; i < this.length; i++) {\n                    if (this.css(\"display\", null, this[i]) === \"none\") {\n                        this[i].style.display = this[i].getAttribute(\"afmOldStyle\") ? this[i].getAttribute(\"afmOldStyle\") : \"block\";\n                        this[i].removeAttribute(\"afmOldStyle\");\n                    }\n                }\n                return this;\n            },"
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "Boolean"
        ],
        "name": "[show]",
        "description": "-force the hiding or showing of the element"
      },
      {
        "type": "return",
        "types": [
          "Object"
        ],
        "description": "an appframework object"
      },
      {
        "type": "title",
        "string": "$().toggle([show])"
      }
    ],
    "description": {
      "full": "<p>Toggle the visibility of a div<br />                <div class=\"highlight\"><pre lang=\"\">                $().toggle();<br />                $().toggle(true); //force showing<br />                </pre></div></p>",
      "summary": "<p>Toggle the visibility of a div<br />                <div class=\"highlight\"><pre lang=\"\">                $().toggle();<br />                $().toggle(true); //force showing<br />                </pre></div></p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "toggle: function(show) {\n                if(this.length === 0)\n                    return this;\n                var show2 = show===true;\n                for (var i = 0; i < this.length; i++) {\n                    if (this.css(\"display\", null, this[i]) !== \"none\" && (show == nundefined || show2 === false)) {\n                        this[i].setAttribute(\"afmOldStyle\", this.css(\"display\", null, this[i]));\n                        this[i].style.display = \"none\";\n                    } else if (this.css(\"display\", null, this[i]) === \"none\" && (show == nundefined || show2 === true)) {\n                        this[i].style.display = this[i].getAttribute(\"afmOldStyle\") ? this[i].getAttribute(\"afmOldStyle\") : \"block\";\n                        this[i].removeAttribute(\"afmOldStyle\");\n                    }\n                }\n                return this;\n            },"
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "String"
        ],
        "name": "[value]",
        "description": "to set"
      },
      {
        "type": "return",
        "types": [
          "String",
          "Object"
        ],
        "description": "A string as a getter, appframework object as a setter"
      },
      {
        "type": "title",
        "string": "$().val([value])"
      }
    ],
    "description": {
      "full": "<p>Gets or sets an elements value<br />If used as a getter, we return the first elements value.  If nothing is in the collection, we return undefined<br />                <div class=\"highlight\"><pre lang=\"\">                $().value; //Gets the first elements value;<br />                $().value=\"bar\"; //Sets all elements value to bar<br />                </pre></div></p>",
      "summary": "<p>Gets or sets an elements value<br />If used as a getter, we return the first elements value.  If nothing is in the collection, we return undefined<br />                <div class=\"highlight\"><pre lang=\"\">                $().value; //Gets the first elements value;<br />                $().value=\"bar\"; //Sets all elements value to bar<br />                </pre></div></p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "val: function(value) {\n                if (this.length === 0)\n                    return (value === nundefined) ? undefined : this;\n                if (value == nundefined)\n                    return this[0].value;\n                for (var i = 0; i < this.length; i++) {\n                    this[i].value = value;\n                }\n                return this;\n            },"
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "String",
          "Object"
        ],
        "name": "attribute",
        "description": "to act upon. If it is an object (hashmap), it will set the attributes based off the kvp."
      },
      {
        "type": "param",
        "types": [
          "String",
          "Array",
          "Object",
          "function"
        ],
        "name": "[value]",
        "description": "to set"
      },
      {
        "type": "return",
        "types": [
          "String",
          "Object",
          "Array",
          "Function"
        ],
        "description": "If used as a getter, return the attribute value. If a setter, return an appframework object"
      },
      {
        "type": "title",
        "string": "$().attr(attribute,[value])"
      }
    ],
    "description": {
      "full": "<p>Gets or sets an attribute on an element<br />If used as a getter, we return the first elements value.  If nothing is in the collection, we return undefined<br />                <div class=\"highlight\"><pre lang=\"\">                $().attr(\"foo\"); //Gets the first elements \"foo\" attribute<br />                $().attr(\"foo\",\"bar\");//Sets the elements \"foo\" attribute to \"bar\"<br />                $().attr(\"foo\",{bar:\"bar\"}) //Adds the object to an internal cache<br />                </pre></div></p>",
      "summary": "<p>Gets or sets an attribute on an element<br />If used as a getter, we return the first elements value.  If nothing is in the collection, we return undefined<br />                <div class=\"highlight\"><pre lang=\"\">                $().attr(\"foo\"); //Gets the first elements \"foo\" attribute<br />                $().attr(\"foo\",\"bar\");//Sets the elements \"foo\" attribute to \"bar\"<br />                $().attr(\"foo\",{bar:\"bar\"}) //Adds the object to an internal cache<br />                </pre></div></p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "attr: function(attr, value) {\n                if (this.length === 0)\n                    return (value === nundefined) ? undefined : this;\n                if (value === nundefined && !$.isObject(attr)) {\n                    var val = (this[0].afmCacheId && _attrCache[this[0].afmCacheId][attr]) ? (this[0].afmCacheId && _attrCache[this[0].afmCacheId][attr]) : this[0].getAttribute(attr);\n                    return val;\n                }\n                for (var i = 0; i < this.length; i++) {\n                    if ($.isObject(attr)) {\n                        for (var key in attr) {\n                            $(this[i]).attr(key, attr[key]);\n                        }\n                    } else if ($.isArray(value) || $.isObject(value) || $.isFunction(value)) {\n\n                        if (!this[i].afmCacheId)\n                            this[i].afmCacheId = $.uuid();\n\n                        if (!_attrCache[this[i].afmCacheId])\n                            _attrCache[this[i].afmCacheId] = {};\n                        _attrCache[this[i].afmCacheId][attr] = value;\n                    } else if (value === null) {\n                        this[i].removeAttribute(attr);\n                        if (this[i].afmCacheId && _attrCache[this[i].afmCacheId][attr])\n                            delete _attrCache[this[i].afmCacheId][attr];\n                    } else {\n                        this[i].setAttribute(attr, value);\n                    }\n                }\n                return this;\n            },"
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "String"
        ],
        "name": "attributes",
        "description": "that can be space delimited"
      },
      {
        "type": "return",
        "types": [
          "Object"
        ],
        "description": "appframework object"
      },
      {
        "type": "title",
        "string": "$().removeAttr(attribute)"
      }
    ],
    "description": {
      "full": "<p>Removes an attribute on the elements<br />                <div class=\"highlight\"><pre lang=\"\">                $().removeAttr(\"foo\");<br />                </pre></div></p>",
      "summary": "<p>Removes an attribute on the elements<br />                <div class=\"highlight\"><pre lang=\"\">                $().removeAttr(\"foo\");<br />                </pre></div></p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "removeAttr: function(attr) {\n                var removeFixer=function(param) {\n                    that[i].removeAttribute(param);\n                    if (that[i].afmCacheId && _attrCache[that[i].afmCacheId][attr])\n                        delete _attrCache[that[i].afmCacheId][attr];\n                };\n                var that = this;\n                for (var i = 0; i < this.length; i++) {\n                    attr.split(/\\s+/g).forEach(removeFixer);\n                }\n                return this;\n            },"
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "String",
          "Object"
        ],
        "name": "property",
        "description": "to act upon. If it is an object (hashmap), it will set the attributes based off the kvp."
      },
      {
        "type": "param",
        "types": [
          "String",
          "Array",
          "Object",
          "function"
        ],
        "name": "[value]",
        "description": "to set"
      },
      {
        "type": "return",
        "types": [
          "String",
          "Object",
          "Array",
          "Function"
        ],
        "description": "If used as a getter, return the property value. If a setter, return an appframework object"
      },
      {
        "type": "title",
        "string": "$().prop(property,[value])"
      }
    ],
    "description": {
      "full": "<p>Gets or sets a property on an element<br />If used as a getter, we return the first elements value.  If nothing is in the collection, we return undefined<br />                <div class=\"highlight\"><pre lang=\"\">                $().prop(\"foo\"); //Gets the first elements \"foo\" property<br />                $().prop(\"foo\",\"bar\");//Sets the elements \"foo\" property to \"bar\"<br />                $().prop(\"foo\",{bar:\"bar\"}) //Adds the object to an internal cache<br />                </pre></div></p>",
      "summary": "<p>Gets or sets a property on an element<br />If used as a getter, we return the first elements value.  If nothing is in the collection, we return undefined<br />                <div class=\"highlight\"><pre lang=\"\">                $().prop(\"foo\"); //Gets the first elements \"foo\" property<br />                $().prop(\"foo\",\"bar\");//Sets the elements \"foo\" property to \"bar\"<br />                $().prop(\"foo\",{bar:\"bar\"}) //Adds the object to an internal cache<br />                </pre></div></p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "prop: function(prop, value) {\n                if (this.length === 0)\n                    return (value === nundefined) ? undefined : this;\n                if (value === nundefined && !$.isObject(prop)) {\n                    var res;\n                    var val = (this[0].afmCacheId && _propCache[this[0].afmCacheId][prop]) ? (this[0].afmCacheId && _propCache[this[0].afmCacheId][prop]) : !(res = this[0][prop]) && prop in this[0] ? this[0][prop] : res;\n                    return val;\n                }\n                for (var i = 0; i < this.length; i++) {\n                    if ($.isObject(prop)) {\n                        for (var key in prop) {\n                            $(this[i]).prop(key, prop[key]);\n                        }\n                    } else if ($.isArray(value) || $.isObject(value) || $.isFunction(value)) {\n\n                        if (!this[i].afmCacheId)\n                            this[i].afmCacheId = $.uuid();\n\n                        if (!_propCache[this[i].afmCacheId])\n                            _propCache[this[i].afmCacheId] = {};\n                        _propCache[this[i].afmCacheId][prop] = value;\n                    } else if (value === null && value !== undefined) {\n                        $(this[i]).removeProp(prop);\n                    } else {\n                        this[i][prop] = value;\n                    }\n                }\n                return this;\n            },"
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "String"
        ],
        "name": "properties",
        "description": "that can be space delimited"
      },
      {
        "type": "return",
        "types": [
          "Object"
        ],
        "description": "appframework object"
      },
      {
        "type": "title",
        "string": "$().removeProp(attribute)"
      }
    ],
    "description": {
      "full": "<p>Removes a property on the elements<br />                <div class=\"highlight\"><pre lang=\"\">                $().removeProp(\"foo\");<br />                </pre></div></p>",
      "summary": "<p>Removes a property on the elements<br />                <div class=\"highlight\"><pre lang=\"\">                $().removeProp(\"foo\");<br />                </pre></div></p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "removeProp: function(prop) {\n                var removePropFn=function(param) {\n                    if (that[i][param])\n                        that[i][param] = undefined;\n                    if (that[i].afmCacheId && _propCache[that[i].afmCacheId][prop]) {\n                        delete _propCache[that[i].afmCacheId][prop];\n                    }\n                };\n                var that = this;\n                for (var i = 0; i < this.length; i++) {\n                    prop.split(/\\s+/g).forEach(removePropFn);\n                }\n                return this;\n            },"
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "String",
          "Object",
          "Array"
        ],
        "name": "selector",
        "description": "to filter against"
      },
      {
        "type": "return",
        "types": [
          "Object"
        ],
        "description": "appframework object"
      },
      {
        "type": "title",
        "string": "$().remove(selector)"
      }
    ],
    "description": {
      "full": "<p>Removes elements based off a selector<br />                <div class=\"highlight\"><pre lang=\"\">                    $().remove();  //Remove all<br />                    $().remove(\".foo\");//Remove off a string selector<br />                    var element=$(\"#foo\").get(0);<br />                    $().remove(element); //Remove by an element<br />                    $().remove($(\".foo\"));  //Remove by a collection<br />                </pre></div></p>",
      "summary": "<p>Removes elements based off a selector<br />                <div class=\"highlight\"><pre lang=\"\">                    $().remove();  //Remove all<br />                    $().remove(\".foo\");//Remove off a string selector<br />                    var element=$(\"#foo\").get(0);<br />                    $().remove(element); //Remove by an element<br />                    $().remove($(\".foo\"));  //Remove by a collection<br />                </pre></div></p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "remove: function(selector) {\n                var elems = $(this).filter(selector);\n                if (elems == nundefined)\n                    return this;\n                for (var i = 0; i < elems.length; i++) {\n                    $.cleanUpContent(elems[i], true, true);\n                    if (elems[i] && elems[i].parentNode) {\n                        elems[i].parentNode.removeChild(elems[i]);\n                    }\n                }\n                return this;\n            },"
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "String"
        ],
        "name": "classes",
        "description": "that are space delimited"
      },
      {
        "type": "return",
        "types": [
          "Object"
        ],
        "description": "appframework object"
      },
      {
        "type": "title",
        "string": "$().addClass(name)"
      }
    ],
    "description": {
      "full": "<p>Adds a css class to elements.<br />                <div class=\"highlight\"><pre lang=\"\">                $().addClass(\"selected\");<br />                </pre></div></p>",
      "summary": "<p>Adds a css class to elements.<br />                <div class=\"highlight\"><pre lang=\"\">                $().addClass(\"selected\");<br />                </pre></div></p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "addClass: function(name) {\n                var addClassLoop=function(cname) {\n                    if (!that.hasClass(cname, that[i]))\n                        classList.push(cname);\n                };\n                if (name == nundefined) return this;\n                for (var i = 0; i < this.length; i++) {\n                    var cls = this[i].className;\n                    var classList = [];\n                    var that = this;\n                    name.split(/\\s+/g).forEach(addClassLoop);\n\n                    this[i].className += (cls ? \" \" : \"\") + classList.join(\" \");\n                    this[i].className = this[i].className.trim();\n                }\n                return this;\n            },"
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "String"
        ],
        "name": "classes",
        "description": "that are space delimited"
      },
      {
        "type": "return",
        "types": [
          "Object"
        ],
        "description": "appframework object"
      },
      {
        "type": "title",
        "string": "$().removeClass(name)"
      }
    ],
    "description": {
      "full": "<p>Removes a css class from elements.<br />                <div class=\"highlight\"><pre lang=\"\">                $().removeClass(\"foo\"); //single class<br />                $().removeClass(\"foo selected\");//remove multiple classess<br />                </pre></div></p>",
      "summary": "<p>Removes a css class from elements.<br />                <div class=\"highlight\"><pre lang=\"\">                $().removeClass(\"foo\"); //single class<br />                $().removeClass(\"foo selected\");//remove multiple classess<br />                </pre></div></p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "removeClass: function(name) {\n                if (name == nundefined) return this;\n                var removeClassLoop=function(cname) {\n                    classList = classList.replace(classRE(cname), \" \");\n                };\n                for (var i = 0; i < this.length; i++) {\n                    if (name == nundefined) {\n                        this[i].className = \"\";\n                        return this;\n                    }\n                    var classList = this[i].className;\n                    //SGV LINK EVENT\n                    if (typeof this[i].className === \"object\") {\n                        classList = \" \";\n                    }\n                    name.split(/\\s+/g).forEach(removeClassLoop);\n                    if (classList.length > 0)\n                        this[i].className = classList.trim();\n                    else\n                        this[i].className = \"\";\n                }\n                return this;\n            },"
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "String"
        ],
        "name": "classes",
        "description": "that are space delimited"
      },
      {
        "type": "param",
        "types": [
          "Boolean"
        ],
        "name": "[state]",
        "description": "force toggle to add or remove classes"
      },
      {
        "type": "return",
        "types": [
          "Object"
        ],
        "description": "appframework object"
      },
      {
        "type": "title",
        "string": "$().toggleClass(name)"
      }
    ],
    "description": {
      "full": "<p>Adds or removes a css class to elements.<br />                <div class=\"highlight\"><pre lang=\"\">                $().toggleClass(\"selected\");<br />                </pre></div></p>",
      "summary": "<p>Adds or removes a css class to elements.<br />                <div class=\"highlight\"><pre lang=\"\">                $().toggleClass(\"selected\");<br />                </pre></div></p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "toggleClass: function(name, state) {\n                if (name == nundefined) return this;\n                for (var i = 0; i < this.length; i++) {\n                    if (typeof state !== \"boolean\") {\n                        state = this.hasClass(name, this[i]);\n                    }\n                    $(this[i])[state ? \"removeClass\" : \"addClass\"](name);\n                }\n                return this;\n            },"
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "String"
        ],
        "name": "classes",
        "description": "that are space delimited"
      },
      {
        "type": "param",
        "types": [
          "String"
        ],
        "name": "classes",
        "description": "that are space delimited"
      },
      {
        "type": "return",
        "types": [
          "Object"
        ],
        "description": "appframework object"
      },
      {
        "type": "title",
        "string": "$().replaceClass(old, new)"
      }
    ],
    "description": {
      "full": "<p>Replaces a css class on elements.<br />                <div class=\"highlight\"><pre lang=\"\">                $().replaceClass(\"on\", \"off\");<br />                </pre></div></p>",
      "summary": "<p>Replaces a css class on elements.<br />                <div class=\"highlight\"><pre lang=\"\">                $().replaceClass(\"on\", \"off\");<br />                </pre></div></p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "replaceClass: function(name, newName) {\n                if (name == nundefined || newName == nundefined) return this;\n                var replaceClassFn=function(cname) {\n                    classList = classList.replace(classRE(cname), \" \");\n                };\n                for (var i = 0; i < this.length; i++) {\n                    if (name == nundefined) {\n                        this[i].className = newName;\n                        continue;\n                    }\n                    var classList = this[i].className;\n                    name.split(/\\s+/g).concat(newName.split(/\\s+/g)).forEach(replaceClassFn);\n                    classList = classList.trim();\n                    if (classList.length > 0) {\n                        this[i].className = (classList + \" \" + newName).trim();\n                    } else\n                        this[i].className = newName;\n                }\n                return this;\n            },"
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "String"
        ],
        "name": "class",
        "description": "name to check against"
      },
      {
        "type": "param",
        "types": [
          "Object"
        ],
        "name": "[element]",
        "description": "to check against"
      },
      {
        "type": "return",
        "types": [
          "Boolean"
        ],
        "description": ""
      },
      {
        "type": "title",
        "string": "$().hasClass(name,[element])"
      }
    ],
    "description": {
      "full": "<p>Checks to see if an element has a class.<br />                <div class=\"highlight\"><pre lang=\"\">                $().hasClass(\"foo\");<br />                $().hasClass(\"foo\",element);<br />                </pre></div></p>",
      "summary": "<p>Checks to see if an element has a class.<br />                <div class=\"highlight\"><pre lang=\"\">                $().hasClass(\"foo\");<br />                $().hasClass(\"foo\",element);<br />                </pre></div></p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "hasClass: function(name, element) {\n                if (this.length === 0)\n                    return false;\n                if (!element)\n                    element = this[0];\n                return classRE(name).test(element.className);\n            },"
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "String",
          "Object"
        ],
        "name": "Element/string",
        "description": "to add"
      },
      {
        "type": "param",
        "types": [
          "String",
          "Object"
        ],
        "name": "Element/string",
        "description": "to add"
      },
      {
        "type": "param",
        "types": [
          "Boolean"
        ],
        "name": "[insert]",
        "description": "insert or append"
      },
      {
        "type": "return",
        "types": [
          "Object"
        ],
        "description": "appframework object"
      },
      {
        "type": "title",
        "string": "$().append(element,[insert],[content])"
      }
    ],
    "description": {
      "full": "<p>Appends to the elements<br />We boil everything down to an appframework object and then loop through that.<br />If it is HTML, we create a dom element so we do not break event bindings.<br />if it is a script tag, we evaluate it.<br />                <div class=\"highlight\"><pre lang=\"\">                $().append(\"<div></div>\"); //Creates the object from the string and appends it<br />                $().append($(\"#foo\")); //Append an object;<br />                </pre></div></p>",
      "summary": "<p>Appends to the elements<br />We boil everything down to an appframework object and then loop through that.<br />If it is HTML, we create a dom element so we do not break event bindings.<br />if it is a script tag, we evaluate it.<br />                <div class=\"highlight\"><pre lang=\"\">                $().append(\"<div></div>\"); //Creates the object from the string and appends it<br />                $().append($(\"#foo\")); //Append an object;<br />                </pre></div></p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "append: function(element, content,insert) {\n                if (element && element.length != nundefined && element.length === 0)\n                    return this;\n                if ($.isArray(element) || $.isObject(element))\n                    element = $(element);\n                var i, node;\n                if(content)\n                    $(this).add(content);\n                for (i = 0; i < this.length; i++) {\n                    if (element.length && typeof element !== \"string\") {\n                        element = $(element);\n                        _insertFragments(element, this[i], insert);\n                    } else {\n                        var obj = fragmentRE.test(element) ? $(element) : undefined;\n                        if (obj == nundefined || obj.length === 0) {\n                            obj = document.createTextNode(element);\n                        }\n                        if (obj instanceof $afm) {\n                            for (var k=0,lenk=obj.length; k<lenk; k++) {\n                                node = obj[k];\n                                if (node.nodeName != nundefined && node.nodeName.toLowerCase() === \"script\" && (!node.type || node.type.toLowerCase() === \"text/javascript\")) {\n                                    window[\"eval\"](node.innerHTML);\n                                } else {\n                                    _insertFragments($(node), this[i], insert);\n                                }\n                            }\n                        } else {\n                            insert != nundefined ? this[i].insertBefore(obj, this[i].firstChild) : this[i].appendChild(obj);\n                        }\n                    }\n                }\n                return this;\n            },"
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "String",
          "Object"
        ],
        "name": "Selector",
        "description": "to append to"
      },
      {
        "type": "param",
        "types": [
          "Boolean"
        ],
        "name": "[insert]",
        "description": "insert or append"
      },
      {
        "type": "title",
        "string": "$().appendTo(element,[insert])"
      }
    ],
    "description": {
      "full": "<p>Appends the current collection to the selector<br />                <div class=\"highlight\"><pre lang=\"\">                $().appendTo(\"#foo\"); //Append an object;<br />                </pre></div></p>",
      "summary": "<p>Appends the current collection to the selector<br />                <div class=\"highlight\"><pre lang=\"\">                $().appendTo(\"#foo\"); //Append an object;<br />                </pre></div></p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "appendTo: function(selector, insert) {\n                var tmp = $(selector);\n                tmp.append(this);\n                return this;\n            },"
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "String",
          "Object"
        ],
        "name": "Selector",
        "description": "to prepent to"
      },
      {
        "type": "title",
        "string": "$().prependTo(element)"
      }
    ],
    "description": {
      "full": "<p>Prepends the current collection to the selector<br />                <div class=\"highlight\"><pre lang=\"\">                $().prependTo(\"#foo\"); //Prepend an object;<br />                </pre></div></p>",
      "summary": "<p>Prepends the current collection to the selector<br />                <div class=\"highlight\"><pre lang=\"\">                $().prependTo(\"#foo\"); //Prepend an object;<br />                </pre></div></p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "prependTo: function(selector) {\n                var tmp = $(selector);\n                tmp.append(this, null,true);\n                return this;\n            },"
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "String",
          "Object"
        ],
        "name": "Element/string",
        "description": "to add"
      },
      {
        "type": "return",
        "types": [
          "Object"
        ],
        "description": "appframework object"
      },
      {
        "type": "title",
        "string": "$().prepend(element)"
      }
    ],
    "description": {
      "full": "<p>Prepends to the elements<br />This simply calls append and sets insert to true<br />                <div class=\"highlight\"><pre lang=\"\">                $().prepend(\"<div></div>\");//Creates the object from the string and appends it<br />                $().prepend($(\"#foo\")); //Prepends an object<br />                </pre></div></p>",
      "summary": "<p>Prepends to the elements<br />This simply calls append and sets insert to true<br />                <div class=\"highlight\"><pre lang=\"\">                $().prepend(\"<div></div>\");//Creates the object from the string and appends it<br />                $().prepend($(\"#foo\")); //Prepends an object<br />                </pre></div></p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "prepend: function(element) {\n                return this.append(element,null, 1);\n            },"
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "String",
          "Object"
        ],
        "name": "Target",
        "description": ""
      },
      {
        "type": "title",
        "string": "$().insertBefore(target);"
      }
    ],
    "description": {
      "full": "<p>Inserts collection before the target (adjacent)<br />                <div class=\"highlight\"><pre lang=\"\">                $().insertBefore(af(\"#target\"));<br />                </pre></div></p>",
      "summary": "<p>Inserts collection before the target (adjacent)<br />                <div class=\"highlight\"><pre lang=\"\">                $().insertBefore(af(\"#target\"));<br />                </pre></div></p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "insertBefore: function(target, after) {\n                if (this.length === 0)\n                    return this;\n                target = $(target).get(0);\n                if (!target)\n                    return this;\n                for (var i = 0; i < this.length; i++) {\n                    after ? target.parentNode.insertBefore(this[i], target.nextSibling) : target.parentNode.insertBefore(this[i], target);\n                }\n                return this;\n            },"
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "String",
          "Object"
        ],
        "name": "target",
        "description": ""
      },
      {
        "type": "title",
        "string": "$().insertAfter(target);"
      }
    ],
    "description": {
      "full": "<p>Inserts collection after the target (adjacent)<br />                <div class=\"highlight\"><pre lang=\"\">                $().insertAfter(af(\"#target\"));<br />                </pre></div></p>",
      "summary": "<p>Inserts collection after the target (adjacent)<br />                <div class=\"highlight\"><pre lang=\"\">                $().insertAfter(af(\"#target\"));<br />                </pre></div></p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "insertAfter: function(target) {\n                this.insertBefore(target, true);\n            },"
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "Int"
        ],
        "name": "[index]",
        "description": ""
      },
      {
        "type": "return",
        "types": [
          "Object"
        ],
        "description": "raw DOM element"
      },
      {
        "type": "title",
        "string": "$().get([index])"
      }
    ],
    "description": {
      "full": "<p>Returns the raw DOM element.<br />                <div class=\"highlight\"><pre lang=\"\">                $().get(0); //returns the first element<br />                $().get(2);// returns the third element<br />                </pre></div></p>",
      "summary": "<p>Returns the raw DOM element.<br />                <div class=\"highlight\"><pre lang=\"\">                $().get(0); //returns the first element<br />                $().get(2);// returns the third element<br />                </pre></div></p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "get: function(index) {\n                index = index == nundefined ? null : index;\n                if (index < 0)\n                    index += this.length;\n                if(index===null){\n                    var elems=[];\n                    for(var i=0;i<this.length;i++){\n                        elems.push(this[i]);\n                    }\n                    return elems;\n                }\n                return (this[index]) ? this[index] : undefined;\n            },"
  },
  {
    "tags": [
      {
        "type": "return",
        "types": [
          "Object"
        ],
        "description": "with left, top, width and height properties"
      },
      {
        "type": "title",
        "string": "$().offset()"
      }
    ],
    "description": {
      "full": "<p>Returns the offset of the element, including traversing up the tree<br />                <div class=\"highlight\"><pre lang=\"\">                $().offset();<br />                </pre></div></p>",
      "summary": "<p>Returns the offset of the element, including traversing up the tree<br />                <div class=\"highlight\"><pre lang=\"\">                $().offset();<br />                </pre></div></p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "offset: function() {\n                var obj;\n                if (this.length === 0)\n                    return this;\n                if (this[0] === window)\n                    return {\n                        left: 0,\n                        top: 0,\n                        right: 0,\n                        bottom: 0,\n                        width: window.innerWidth,\n                        height: window.innerHeight\n                    };\n                else\n                    obj = this[0].getBoundingClientRect();\n                return {\n                    left: obj.left + window.pageXOffset,\n                    top: obj.top + window.pageYOffset,\n                    right: obj.right + window.pageXOffset,\n                    bottom: obj.bottom + window.pageYOffset,\n                    width: obj.right - obj.left,\n                    height: obj.bottom - obj.top\n                };\n            },"
  },
  {
    "tags": [
      {
        "type": "return",
        "types": [
          "string"
        ],
        "description": "height"
      },
      {
        "type": "title",
        "string": "$().height()"
      }
    ],
    "description": {
      "full": "<p>returns the height of the element, including padding on IE<br />               <div class=\"highlight\"><pre lang=\"\">               $().height();<br />               </pre></div></p>",
      "summary": "<p>returns the height of the element, including padding on IE<br />               <div class=\"highlight\"><pre lang=\"\">               $().height();<br />               </pre></div></p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "height: function(val) {\n                if (this.length === 0)\n                    return this;\n                if (val != nundefined)\n                    return this.css(\"height\", val);\n                if (this[0] === this[0].window)\n                    return window.innerHeight + \"\";\n                if (this[0].nodeType === this[0].DOCUMENT_NODE)\n                    return this[0].documentElement.offsetheight;\n                else {\n                    var tmpVal = this.css(\"height\").replace(\"px\", \"\");\n                    if (tmpVal)\n                        return +tmpVal;\n                    else\n                        return this.offset().height;\n                }\n            },"
  },
  {
    "tags": [
      {
        "type": "return",
        "types": [
          "string"
        ],
        "description": "width"
      },
      {
        "type": "title",
        "string": "$().width()"
      }
    ],
    "description": {
      "full": "<p>returns the width of the element, including padding on IE<br />               <div class=\"highlight\"><pre lang=\"\">               $().width();<br />               </pre></div></p>",
      "summary": "<p>returns the width of the element, including padding on IE<br />               <div class=\"highlight\"><pre lang=\"\">               $().width();<br />               </pre></div></p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "width: function(val) {\n                if (this.length === 0)\n                    return this;\n                if (val != nundefined)\n                    return this.css(\"width\", val);\n                if (this[0] === this[0].window)\n                    return window.innerWidth;\n                if (this[0].nodeType === this[0].DOCUMENT_NODE)\n                    return this[0].documentElement.offsetwidth;\n                else {\n                    var tmpVal = this.css(\"width\").replace(\"px\", \"\");\n                    if (tmpVal)\n                        return +tmpVal;\n                    else\n                        return this.offset().width;\n                }\n            },"
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "String",
          "Array",
          "Object"
        ],
        "name": "[selector]",
        "description": ""
      },
      {
        "type": "return",
        "types": [
          "Object"
        ],
        "description": "appframework object with unique parents"
      },
      {
        "type": "title",
        "string": "$().parent(selector)"
      }
    ],
    "description": {
      "full": "<p>Returns the parent nodes of the elements based off the selector<br />                <div class=\"highlight\"><pre lang=\"\">                $(\"#foo\").parent(\".bar\");<br />                $(\"#foo\").parent($(\".bar\"));<br />                $(\"#foo\").parent($(\".bar\").get(0));<br />                </pre></div></p>",
      "summary": "<p>Returns the parent nodes of the elements based off the selector<br />                <div class=\"highlight\"><pre lang=\"\">                $(\"#foo\").parent(\".bar\");<br />                $(\"#foo\").parent($(\".bar\"));<br />                $(\"#foo\").parent($(\".bar\").get(0));<br />                </pre></div></p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "parent: function(selector, recursive) {\n                if (this.length === 0)\n                    return this;\n                var elems = [];\n                for (var i = 0; i < this.length; i++) {\n                    var tmp = this[i];\n                    while (tmp.parentNode && tmp.parentNode !== document) {\n                        elems.push(tmp.parentNode);\n                        if (tmp.parentNode)\n                            tmp = tmp.parentNode;\n                        if (!recursive)\n                            break;\n                    }\n                }\n                return this.setupOld($(unique(elems)).filter(selector));\n            },"
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "String",
          "Array",
          "Object"
        ],
        "name": "[selector]",
        "description": ""
      },
      {
        "type": "return",
        "types": [
          "Object"
        ],
        "description": "appframework object with unique parents"
      },
      {
        "type": "title",
        "string": "$().parents(selector)"
      }
    ],
    "description": {
      "full": "<p>Returns the parents of the elements based off the selector (traversing up until html document)<br />                <div class=\"highlight\"><pre lang=\"\">                $(\"#foo\").parents(\".bar\");<br />                $(\"#foo\").parents($(\".bar\"));<br />                $(\"#foo\").parents($(\".bar\").get(0));<br />                </pre></div></p>",
      "summary": "<p>Returns the parents of the elements based off the selector (traversing up until html document)<br />                <div class=\"highlight\"><pre lang=\"\">                $(\"#foo\").parents(\".bar\");<br />                $(\"#foo\").parents($(\".bar\"));<br />                $(\"#foo\").parents($(\".bar\").get(0));<br />                </pre></div></p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "parents: function(selector) {\n                return this.parent(selector, true);\n            },"
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "String",
          "Array",
          "Object"
        ],
        "name": "[selector]",
        "description": ""
      },
      {
        "type": "return",
        "types": [
          "Object"
        ],
        "description": "appframework object with unique children"
      },
      {
        "type": "title",
        "string": "$().children(selector)"
      }
    ],
    "description": {
      "full": "<p>Returns the child nodes of the elements based off the selector<br />                <div class=\"highlight\"><pre lang=\"\">                $(\"#foo\").children(\".bar\"); //Selector<br />                $(\"#foo\").children($(\".bar\")); //Objects<br />                $(\"#foo\").children($(\".bar\").get(0)); //Single element<br />                </pre></div></p>",
      "summary": "<p>Returns the child nodes of the elements based off the selector<br />                <div class=\"highlight\"><pre lang=\"\">                $(\"#foo\").children(\".bar\"); //Selector<br />                $(\"#foo\").children($(\".bar\")); //Objects<br />                $(\"#foo\").children($(\".bar\").get(0)); //Single element<br />                </pre></div></p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "children: function(selector) {\n\n                if (this.length === 0)\n                    return this;\n                var elems = [];\n                for (var i = 0; i < this.length; i++) {\n                    elems = elems.concat(siblings(this[i].firstChild));\n                }\n                return this.setupOld($((elems)).filter(selector));\n\n            },"
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "String",
          "Array",
          "Object"
        ],
        "name": "[selector]",
        "description": ""
      },
      {
        "type": "return",
        "types": [
          "Object"
        ],
        "description": "appframework object with unique siblings"
      },
      {
        "type": "title",
        "string": "$().siblings(selector)"
      }
    ],
    "description": {
      "full": "<p>Returns the siblings of the element based off the selector<br />                <div class=\"highlight\"><pre lang=\"\">                $(\"#foo\").siblings(\".bar\"); //Selector<br />                $(\"#foo\").siblings($(\".bar\")); //Objects<br />                $(\"#foo\").siblings($(\".bar\").get(0)); //Single element<br />                </pre></div></p>",
      "summary": "<p>Returns the siblings of the element based off the selector<br />                <div class=\"highlight\"><pre lang=\"\">                $(\"#foo\").siblings(\".bar\"); //Selector<br />                $(\"#foo\").siblings($(\".bar\")); //Objects<br />                $(\"#foo\").siblings($(\".bar\").get(0)); //Single element<br />                </pre></div></p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "siblings: function(selector) {\n                if (this.length === 0)\n                    return this;\n                var elems = [];\n                for (var i = 0; i < this.length; i++) {\n                    if (this[i].parentNode)\n                        elems = elems.concat(siblings(this[i].parentNode.firstChild, this[i]));\n                }\n                return this.setupOld($(elems).filter(selector));\n            },"
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "String",
          "Array",
          "Object"
        ],
        "name": "[selector]",
        "description": ""
      },
      {
        "type": "return",
        "types": [
          "Object"
        ],
        "description": "appframework object with unique children"
      },
      {
        "type": "title",
        "string": "$().contents(selector)"
      }
    ],
    "description": {
      "full": "<p>Returns the child nodes of the elements based off the selector and includes text nodes<br />                <div class=\"highlight\"><pre lang=\"\">                $(\"#foo\").contents(\".bar\"); //Selector<br />                $(\"#foo\").contents($(\".bar\")); //Objects<br />                $(\"#foo\").contents($(\".bar\").get(0)); //Single element<br />                </pre></div></p>",
      "summary": "<p>Returns the child nodes of the elements based off the selector and includes text nodes<br />                <div class=\"highlight\"><pre lang=\"\">                $(\"#foo\").contents(\".bar\"); //Selector<br />                $(\"#foo\").contents($(\".bar\")); //Objects<br />                $(\"#foo\").contents($(\".bar\").get(0)); //Single element<br />                </pre></div></p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "contents:function(selector){\n                if (this.length === 0)\n                    return this;\n                var elems = [];\n                for (var i = 0; i < this.length; i++) {\n                    if (this[i].parentNode)\n                        //elems = elems.concat(this[i].childNodes);\n                        _shimNodes(this[i].childNodes,elems);\n                }\n                return this.setupOld($(elems).filter(selector));\n            },"
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "String",
          "Array",
          "Object"
        ],
        "name": "selector",
        "description": ""
      },
      {
        "type": "param",
        "types": [
          "Object"
        ],
        "name": "[context]",
        "description": ""
      },
      {
        "type": "return",
        "types": [
          "Object"
        ],
        "description": "Returns an appframework object with the closest element based off the selector"
      },
      {
        "type": "title",
        "string": "$().closest(selector,[context]);"
      }
    ],
    "description": {
      "full": "<p>Returns the closest element based off the selector and optional context<br />                <div class=\"highlight\"><pre lang=\"\">                $(\"#foo\").closest(\".bar\"); //Selector<br />                $(\"#foo\").closest($(\".bar\")); //Objects<br />                $(\"#foo\").closest($(\".bar\").get(0)); //Single element<br />                </pre></div></p>",
      "summary": "<p>Returns the closest element based off the selector and optional context<br />                <div class=\"highlight\"><pre lang=\"\">                $(\"#foo\").closest(\".bar\"); //Selector<br />                $(\"#foo\").closest($(\".bar\")); //Objects<br />                $(\"#foo\").closest($(\".bar\").get(0)); //Single element<br />                </pre></div></p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "closest: function(selector, context) {\n                if (this.length === 0)\n                    return this;\n                var elems = [],\n                    cur = this[0];\n\n                var start = $(selector, context);\n                if (start.length === 0)\n                    return $();\n                while (cur && start.indexOf(cur) === -1) {\n                    cur = cur !== context && cur !== document && cur.parentNode;\n                }\n                return $(cur);\n\n            },"
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "String",
          "Array",
          "Object"
        ],
        "name": "selector",
        "description": ""
      },
      {
        "type": "return",
        "types": [
          "Object"
        ],
        "description": "Returns an appframework object after the filter was run"
      },
      {
        "type": "title",
        "string": "$().filter(selector);"
      }
    ],
    "description": {
      "full": "<p>Filters elements based off the selector<br />                <div class=\"highlight\"><pre lang=\"\">                $(\"#foo\").filter(\".bar\"); //Selector<br />                $(\"#foo\").filter($(\".bar\")); //Objects<br />                $(\"#foo\").filter($(\".bar\").get(0)); //Single element<br />                </pre></div></p>",
      "summary": "<p>Filters elements based off the selector<br />                <div class=\"highlight\"><pre lang=\"\">                $(\"#foo\").filter(\".bar\"); //Selector<br />                $(\"#foo\").filter($(\".bar\")); //Objects<br />                $(\"#foo\").filter($(\".bar\").get(0)); //Single element<br />                </pre></div></p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "filter: function(selector) {\n                if (this.length === 0)\n                    return this;\n\n                if (selector == nundefined)\n                    return this;\n                var elems = [];\n                for (var i = 0; i < this.length; i++) {\n                    var val = this[i];\n                    if (val.parentNode && $(selector, val.parentNode).indexOf(val) >= 0)\n                        elems.push(val);\n                }\n                return this.setupOld($(unique(elems)));\n            },"
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "String",
          "Array",
          "Object"
        ],
        "name": "selector",
        "description": ""
      },
      {
        "type": "return",
        "types": [
          "Object"
        ],
        "description": "Returns an appframework object after the filter was run"
      },
      {
        "type": "title",
        "string": "$().not(selector);"
      }
    ],
    "description": {
      "full": "<p>Basically the reverse of filter.  Return all elements that do NOT match the selector<br />                <div class=\"highlight\"><pre lang=\"\">                $(\"#foo\").not(\".bar\"); //Selector<br />                $(\"#foo\").not($(\".bar\")); //Objects<br />                $(\"#foo\").not($(\".bar\").get(0)); //Single element<br />                </pre></div></p>",
      "summary": "<p>Basically the reverse of filter.  Return all elements that do NOT match the selector<br />                <div class=\"highlight\"><pre lang=\"\">                $(\"#foo\").not(\".bar\"); //Selector<br />                $(\"#foo\").not($(\".bar\")); //Objects<br />                $(\"#foo\").not($(\".bar\").get(0)); //Single element<br />                </pre></div></p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "not: function(selector) {\n                if (this.length === 0)\n                    return this;\n                var elems = [];\n                for (var i = 0; i < this.length; i++) {\n                    var val = this[i];\n                    if (val.parentNode && $(selector, val.parentNode).indexOf(val) === -1)\n                        elems.push(val);\n                }\n                return this.setupOld($(unique(elems)));\n            },"
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "String"
        ],
        "name": "key",
        "description": ""
      },
      {
        "type": "param",
        "types": [
          "String",
          "Array",
          "Object"
        ],
        "name": "value",
        "description": ""
      },
      {
        "type": "return",
        "types": [
          "String",
          "Object"
        ],
        "description": "returns the value or appframework object"
      },
      {
        "type": "title",
        "string": "$().data(key,[value]);"
      }
    ],
    "description": {
      "full": "<p>Gets or set data-* attribute parameters on elements (when a string)<br />When used as a getter, it\"s only the first element<br />                <div class=\"highlight\"><pre lang=\"\">                $().data(\"foo\"); //Gets the data-foo attribute for the first element<br />                $().data(\"foo\",\"bar\"); //Sets the data-foo attribute for all elements<br />                $().data(\"foo\",{bar:\"bar\"});//object as the data<br />                </pre></div></p>",
      "summary": "<p>Gets or set data-* attribute parameters on elements (when a string)<br />When used as a getter, it\"s only the first element<br />                <div class=\"highlight\"><pre lang=\"\">                $().data(\"foo\"); //Gets the data-foo attribute for the first element<br />                $().data(\"foo\",\"bar\"); //Sets the data-foo attribute for all elements<br />                $().data(\"foo\",{bar:\"bar\"});//object as the data<br />                </pre></div></p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "data: function(key, value) {\n                return this.attr(\"data-\" + key, value);\n            },"
  },
  {
    "tags": [
      {
        "type": "return",
        "types": [
          "Object"
        ],
        "description": "returns the previous appframework object before filter was applied"
      },
      {
        "type": "title",
        "string": "$().end();"
      }
    ],
    "description": {
      "full": "<p>Rolls back the appframework elements when filters were applied<br />This can be used after .not(), .filter(), .children(), .parent()<br />                <div class=\"highlight\"><pre lang=\"\">                $().filter(\".panel\").end(); //This will return the collection BEFORE filter is applied<br />                </pre></div></p>",
      "summary": "<p>Rolls back the appframework elements when filters were applied<br />This can be used after .not(), .filter(), .children(), .parent()<br />                <div class=\"highlight\"><pre lang=\"\">                $().filter(\".panel\").end(); //This will return the collection BEFORE filter is applied<br />                </pre></div></p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "end: function() {\n                return this.oldElement != nundefined ? this.oldElement : $();\n            },"
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "Boolean"
        ],
        "name": "[deep]",
        "description": "- do a deep copy or not"
      },
      {
        "type": "return",
        "types": [
          "Object"
        ],
        "description": "appframework object of cloned nodes"
      },
      {
        "type": "title",
        "string": "$().clone();"
      }
    ],
    "description": {
      "full": "<p>Clones the nodes in the collection.<br />                <div class=\"highlight\"><pre lang=\"\">                $().clone();// Deep clone of all elements<br />                $().clone(false); //Shallow clone<br />                </pre></div></p>",
      "summary": "<p>Clones the nodes in the collection.<br />                <div class=\"highlight\"><pre lang=\"\">                $().clone();// Deep clone of all elements<br />                $().clone(false); //Shallow clone<br />                </pre></div></p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "clone: function(deep) {\n                deep = deep === false ? false : true;\n                if (this.length === 0)\n                    return this;\n                var elems = [];\n                for (var i = 0; i < this.length; i++) {\n                    elems.push(this[i].cloneNode(deep));\n                }\n\n                return $(elems);\n            },"
  },
  {
    "tags": [
      {
        "type": "return",
        "types": [
          "Int"
        ],
        "description": ""
      },
      {
        "type": "title",
        "string": "$().size();"
      }
    ],
    "description": {
      "full": "<p>Returns the number of elements in the collection<br />                <div class=\"highlight\"><pre lang=\"\">                $().size();<br />                </pre></div></p>",
      "summary": "<p>Returns the number of elements in the collection<br />                <div class=\"highlight\"><pre lang=\"\">                $().size();<br />                </pre></div></p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "size: function() {\n                return this.length;\n            },"
  },
  {
    "tags": [
      {
        "type": "return",
        "types": [
          "String"
        ],
        "description": ""
      },
      {
        "type": "title",
        "string": "$().serialize()"
      }
    ],
    "description": {
      "full": "<p>Serailizes a form into a query string<br />               <div class=\"highlight\"><pre lang=\"\">               $().serialize();<br />               </pre></div></p>",
      "summary": "<p>Serailizes a form into a query string<br />               <div class=\"highlight\"><pre lang=\"\">               $().serialize();<br />               </pre></div></p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "serialize: function() {\n                if (this.length === 0)\n                    return \"\";\n                var serializeFn=function(elem) {\n                    var type = elem.getAttribute(\"type\");\n                    if (elem.nodeName.toLowerCase() !== \"fieldset\" && !elem.disabled && type !== \"submit\" && type !== \"reset\" && type !== \"button\" && ((type !== \"radio\" && type !== \"checkbox\") || elem.checked)) {\n\n                        if (elem.getAttribute(\"name\")) {\n                            if (elem.type === \"select-multiple\") {\n                                for (var j = 0; j < elem.options.length; j++) {\n                                    if (elem.options[j].selected)\n                                        params.push(elem.getAttribute(\"name\") + \"=\" + encodeURIComponent(elem.options[j].value));\n                                }\n                            } else\n                                params.push(elem.getAttribute(\"name\") + \"=\" + encodeURIComponent(elem.value));\n                        }\n                    }\n                };\n                var params = [];\n                for (var i = 0; i < this.length; i++) {\n                    this.slice.call(this[i].elements).forEach(serializeFn);\n                }\n                return params.join(\"&\");\n            },"
  },
  {
    "tags": [],
    "description": {
      "full": "<p>added in 1.2</p>",
      "summary": "<p>added in 1.2</p>",
      "body": ""
    },
    "ignore": false
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "Int"
        ],
        "name": "ind",
        "description": "Index to filter by. If negative, it will go back from the end"
      },
      {
        "type": "return",
        "types": [
          "Object"
        ],
        "description": "appframework object"
      },
      {
        "type": "title",
        "string": "$().eq(index)"
      }
    ],
    "description": {
      "full": "<p>Reduce the set of elements based off index<br />                <div class=\"highlight\"><pre lang=\"\">               $().eq(index)<br />               </pre></div></p>",
      "summary": "<p>Reduce the set of elements based off index<br />                <div class=\"highlight\"><pre lang=\"\">               $().eq(index)<br />               </pre></div></p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "eq: function(ind) {\n                return $(this.get(ind));\n            },"
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "String",
          "Object"
        ],
        "name": "elem",
        "description": "The element to look for. Can be a selector or object"
      },
      {
        "type": "return",
        "types": [
          "integer"
        ],
        "description": "- index of selected element"
      },
      {
        "type": "title",
        "string": "$().index(elem)"
      }
    ],
    "description": {
      "full": "<p>Returns the index of the selected element in the collection<br />               <div class=\"highlight\"><pre lang=\"\">               $().index(elem)<br />               </pre></div></p>",
      "summary": "<p>Returns the index of the selected element in the collection<br />               <div class=\"highlight\"><pre lang=\"\">               $().index(elem)<br />               </pre></div></p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "index: function(elem) {\n                return elem ? this.indexOf($(elem)[0]) : this.parent().children().indexOf(this[0]);\n            },"
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "String",
          "Object"
        ],
        "name": "selector",
        "description": "to act upon"
      },
      {
        "type": "return",
        "types": [
          "boolean"
        ],
        "description": ""
      },
      {
        "type": "title",
        "string": "$().is(selector)"
      }
    ],
    "description": {
      "full": "<p>Returns boolean if the object is a type of the selector<br />              <div class=\"highlight\"><pre lang=\"\">              $().is(selector)<br />              </pre></div></p>",
      "summary": "<p>Returns boolean if the object is a type of the selector<br />              <div class=\"highlight\"><pre lang=\"\">              $().is(selector)<br />              </pre></div></p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "is: function(selector) {\n                return !!selector && this.filter(selector).length > 0;\n            },"
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "String",
          "Object"
        ],
        "name": "selector",
        "description": "to act upon"
      },
      {
        "type": "return",
        "types": [
          "object"
        ],
        "description": "appframework object"
      },
      {
        "type": "title",
        "string": "$().add(selector)"
      }
    ],
    "description": {
      "full": "<p>adds a result to an existing AF collection<br />             <div class=\"highlight\"><pre lang=\"\">             $().add(selector)<br />             </pre></div></p>",
      "summary": "<p>adds a result to an existing AF collection<br />             <div class=\"highlight\"><pre lang=\"\">             $().add(selector)<br />             </pre></div></p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "add:function(selector){\n                var els=$(selector);\n                var i,len=els.length;\n                for(i=0;i<len;i++){\n                    this[this.length++]=els[i];\n                }\n                return this;\n            }\n        };"
  },
  {
    "tags": [],
    "description": {
      "full": "<p>AJAX functions</p>",
      "summary": "<p>AJAX functions</p>",
      "body": ""
    },
    "ignore": false,
    "code": "function empty() {}\n        $.ajaxSettings = {\n            type: \"GET\",\n            beforeSend: empty,\n            success: empty,\n            error: empty,\n            complete: empty,\n            context: undefined,\n            timeout: 0,\n            crossDomain: null\n        };",
    "ctx": {
      "type": "function",
      "name": "empty",
      "string": "empty()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "Object"
        ],
        "name": "options",
        "description": ""
      },
      {
        "type": "title",
        "string": "$.jsonP(options)"
      }
    ],
    "description": {
      "full": "<p>Execute a jsonP call, allowing cross domain scripting<br />options.url - URL to call<br />options.success - Success function to call<br />options.error - Error function to call<br />            <div class=\"highlight\"><pre lang=\"\">            $.jsonP({url:\"mysite.php?callback=?&amp;foo=bar\",success:function(){},error:function(){}});<br />            </pre></div></p>",
      "summary": "<p>Execute a jsonP call, allowing cross domain scripting<br />options.url - URL to call<br />options.success - Success function to call<br />options.error - Error function to call<br />            <div class=\"highlight\"><pre lang=\"\">            $.jsonP({url:\"mysite.php?callback=?&amp;foo=bar\",success:function(){},error:function(){}});<br />            </pre></div></p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "$.jsonP = function(options) {\n            if (isWin8) {\n                options.type = \"get\";\n                options.dataType = null;\n                return $.get(options);\n            }\n            var callbackName = \"jsonp_callback\" + (++_jsonPID);\n            var abortTimeout = \"\",\n                context, callback;\n            var script = document.createElement(\"script\");\n            var abort = function() {\n                $(script).remove();\n                if (window[callbackName])\n                    window[callbackName] = empty;\n            };\n            window[callbackName] = function(data) {\n                clearTimeout(abortTimeout);\n                $(script).remove();\n                delete window[callbackName];\n                options.success.call(context, data);\n            };\n            if (options.url.indexOf(\"callback=?\") !== -1) {\n                script.src = options.url.replace(/=\\?/, \"=\" + callbackName);\n            } else {\n                callback = options.jsonp ? options.jsonp : \"callback\";\n                if (options.url.indexOf(\"?\") === -1) {\n                    options.url += (\"?\" + callback + \"=\" + callbackName);\n                }\n                else {\n                    options.url += (\"&\" + callback + \"=\" + callbackName);\n                }\n                script.src = options.url;\n            }\n            if (options.error) {\n                script.onerror = function() {\n                    clearTimeout(abortTimeout);\n                    options.error.call(context, \"\", \"error\");\n                };\n            }\n            $(\"head\").append(script);\n            if (options.timeout > 0)\n                abortTimeout = setTimeout(function() {\n                    options.error.call(context, \"\", \"timeout\");\n                }, options.timeout);\n            return {};\n        };"
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "Object"
        ],
        "name": "opts",
        "description": "Options"
      },
      {
        "type": "title",
        "string": "$.ajax(options)"
      }
    ],
    "description": {
      "full": "<p>Execute an Ajax call with the given options<br />options.type - Type of request<br />options.beforeSend - function to execute before sending the request<br />options.success - success callback<br />options.error - error callback<br />options.complete - complete callback - callled with a success or error<br />options.timeout - timeout to wait for the request<br />options.url - URL to make request against<br />options.contentType - HTTP Request Content Type<br />options.headers - Object of headers to set<br />options.dataType - Data type of request<br />options.data - data to pass into request.  $.param is called on objects<br />            <div class=\"highlight\"><pre lang=\"\">            var opts={<br />                type:\"GET\",<br />                success:function(data){},<br />                url:\"mypage.php\",<br />                data:{bar:\"bar\"},<br />            }<br />            $.ajax(opts);<br />            </pre></div></p>",
      "summary": "<p>Execute an Ajax call with the given options<br />options.type - Type of request<br />options.beforeSend - function to execute before sending the request<br />options.success - success callback<br />options.error - error callback<br />options.complete - complete callback - callled with a success or error<br />options.timeout - timeout to wait for the request<br />options.url - URL to make request against<br />options.contentType - HTTP Request Content Type<br />options.headers - Object of headers to set<br />options.dataType - Data type of request<br />options.data - data to pass into request.  $.param is called on objects<br />            <div class=\"highlight\"><pre lang=\"\">            var opts={<br />                type:\"GET\",<br />                success:function(data){},<br />                url:\"mypage.php\",<br />                data:{bar:\"bar\"},<br />            }<br />            $.ajax(opts);<br />            </pre></div></p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "$.ajax = function(opts) {\n            var xhr;\n            try {\n\n                var settings = opts || {};\n                for (var key in $.ajaxSettings) {\n                    if (typeof(settings[key]) === \"undefined\")\n                        settings[key] = $.ajaxSettings[key];\n                }\n\n                if (!settings.url)\n                    settings.url = window.location;\n                if (!settings.contentType)\n                    settings.contentType = \"application/x-www-form-urlencoded\";\n                if (!settings.headers)\n                    settings.headers = {};\n\n                if (!(\"async\" in settings) || settings.async !== false)\n                    settings.async = true;\n\n                if ($.isObject(settings.data))\n                    settings.data = $.param(settings.data);\n                if (settings.type.toLowerCase() === \"get\" && settings.data) {\n                    if (settings.url.indexOf(\"?\") === -1)\n                        settings.url += \"?\" + settings.data;\n                    else\n                        settings.url += \"&\" + settings.data;\n                }\n                if (!settings.dataType)\n                    settings.dataType = \"text/html\";\n                else {\n                    switch (settings.dataType) {\n                    case \"script\":\n                        settings.dataType = \"text/javascript, application/javascript\";\n                        break;\n                    case \"json\":\n                        settings.dataType = \"application/json\";\n                        break;\n                    case \"xml\":\n                        settings.dataType = \"application/xml, text/xml\";\n                        break;\n                    case \"html\":\n                        settings.dataType = \"text/html\";\n                        break;\n                    case \"text\":\n                        settings.dataType = \"text/plain\";\n                        break;\n                    case \"jsonp\":\n                        return $.jsonP(opts);\n                    default:\n                        settings.dataType = \"text/html\";\n                        break;\n                    }\n                }\n\n\n                if (/=\\?/.test(settings.url)) {\n                    return $.jsonP(settings);\n                }\n                if (settings.crossDomain === null) settings.crossDomain = /^([\\w-]+:)?\\/\\/([^\\/]+)/.test(settings.url) &&\n                        RegExp.$2 !== window.location.host;\n\n                if (!settings.crossDomain)\n                    settings.headers = $.extend({\n                        \"X-Requested-With\": \"XMLHttpRequest\"\n                    }, settings.headers);\n                var abortTimeout;\n                var context = settings.context;\n                var protocol = /^([\\w-]+:)\\/\\//.test(settings.url) ? RegExp.$1 : window.location.protocol;\n\n                //ok, we are really using xhr\n                xhr = new window.XMLHttpRequest();\n\n\n                xhr.onreadystatechange = function() {\n                    var mime = settings.dataType;\n                    if (xhr.readyState === 4) {\n                        clearTimeout(abortTimeout);\n                        var result, error = false;\n                        if ((xhr.status >= 200 && xhr.status < 300) || xhr.status === 0 && protocol === \"file:\") {\n                            if (mime === \"application/json\" && !(/^\\s*$/.test(xhr.responseText))) {\n                                try {\n                                    result = JSON.parse(xhr.responseText);\n                                } catch (e) {\n                                    error = e;\n                                }\n                            } else if (mime === \"application/xml, text/xml\") {\n                                result = xhr.responseXML;\n                            } else if (mime === \"text/html\") {\n                                result = xhr.responseText;\n                                $.parseJS(result);\n                            } else\n                                result = xhr.responseText;\n                            //If we\"re looking at a local file, we assume that no response sent back means there was an error\n                            if (xhr.status === 0 && result.length === 0)\n                                error = true;\n                            if (error)\n                                settings.error.call(context, xhr, \"parsererror\", error);\n                            else {\n                                settings.success.call(context, result, \"success\", xhr);\n                            }\n                        } else {\n                            error = true;\n                            settings.error.call(context, xhr, \"error\");\n                        }\n                        settings.complete.call(context, xhr, error ? \"error\" : \"success\");\n                    }\n                };\n                xhr.open(settings.type, settings.url, settings.async);\n                if (settings.withCredentials) xhr.withCredentials = true;\n\n                if (settings.contentType)\n                    settings.headers[\"Content-Type\"] = settings.contentType;\n                for (var name in settings.headers)\n                    if (typeof settings.headers[name] === \"string\")\n                        xhr.setRequestHeader(name, settings.headers[name]);\n                if (settings.beforeSend.call(context, xhr, settings) === false) {\n                    xhr.abort();\n                    return false;\n                }\n\n                if (settings.timeout > 0)\n                    abortTimeout = setTimeout(function() {\n                        xhr.onreadystatechange = empty;\n                        xhr.abort();\n                        settings.error.call(context, xhr, \"timeout\");\n                    }, settings.timeout);\n                xhr.send(settings.data);\n            } catch (e) {\n                // General errors (e.g. access denied) should also be sent to the error callback\n                console.log(e);\n                settings.error.call(context, xhr, \"error\", e);\n            }\n            return xhr;\n        };"
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "String"
        ],
        "name": "url",
        "description": "to hit"
      },
      {
        "type": "param",
        "types": [
          "Function"
        ],
        "name": "success",
        "description": ""
      },
      {
        "type": "title",
        "string": "$.get(url,success)"
      }
    ],
    "description": {
      "full": "<p>Shorthand call to an Ajax GET request<br />            <div class=\"highlight\"><pre lang=\"\">            $.get(\"mypage.php?foo=bar\",function(data){});<br />            </pre></div></p>",
      "summary": "<p>Shorthand call to an Ajax GET request<br />            <div class=\"highlight\"><pre lang=\"\">            $.get(\"mypage.php?foo=bar\",function(data){});<br />            </pre></div></p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "$.get = function(url, success) {\n            return this.ajax({\n                url: url,\n                success: success\n            });\n        };"
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "String"
        ],
        "name": "url",
        "description": "to hit"
      },
      {
        "type": "param",
        "types": [
          "Object"
        ],
        "name": "[data]",
        "description": "to pass in"
      },
      {
        "type": "param",
        "types": [
          "Function"
        ],
        "name": "success",
        "description": ""
      },
      {
        "type": "param",
        "types": [
          "String"
        ],
        "name": "[dataType]",
        "description": ""
      },
      {
        "type": "title",
        "string": "$.post(url,[data],success,[dataType])"
      }
    ],
    "description": {
      "full": "<p>Shorthand call to an Ajax POST request<br />            <div class=\"highlight\"><pre lang=\"\">            $.post(\"mypage.php\",{bar:\"bar\"},function(data){});<br />            </pre></div></p>",
      "summary": "<p>Shorthand call to an Ajax POST request<br />            <div class=\"highlight\"><pre lang=\"\">            $.post(\"mypage.php\",{bar:\"bar\"},function(data){});<br />            </pre></div></p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "$.post = function(url, data, success, dataType) {\n            if (typeof(data) === \"function\") {\n                success = data;\n                data = {};\n            }\n            if (dataType === nundefined)\n                dataType = \"html\";\n            return this.ajax({\n                url: url,\n                type: \"POST\",\n                data: data,\n                dataType: dataType,\n                success: success\n            });\n        };"
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "String"
        ],
        "name": "url",
        "description": "to hit"
      },
      {
        "type": "param",
        "types": [
          "Object"
        ],
        "name": "[data]",
        "description": ""
      },
      {
        "type": "param",
        "types": [
          "Function"
        ],
        "name": "[success]",
        "description": ""
      },
      {
        "type": "title",
        "string": "$.getJSON(url,data,success)"
      }
    ],
    "description": {
      "full": "<p>Shorthand call to an Ajax request that expects a JSON response<br />            <div class=\"highlight\"><pre lang=\"\">            $.getJSON(\"mypage.php\",{bar:\"bar\"},function(data){});<br />            </pre></div></p>",
      "summary": "<p>Shorthand call to an Ajax request that expects a JSON response<br />            <div class=\"highlight\"><pre lang=\"\">            $.getJSON(\"mypage.php\",{bar:\"bar\"},function(data){});<br />            </pre></div></p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "$.getJSON = function(url, data, success) {\n            if (typeof(data) === \"function\") {\n                success = data;\n                data = {};\n            }\n            return this.ajax({\n                url: url,\n                data: data,\n                success: success,\n                dataType: \"json\"\n            });\n        };"
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "Object"
        ],
        "name": "object",
        "description": ""
      },
      {
        "type": "param",
        "types": [
          "String"
        ],
        "name": "[prefix]",
        "description": ""
      },
      {
        "type": "return",
        "types": [
          "String"
        ],
        "description": "Key/value pair representation"
      },
      {
        "type": "title",
        "string": "$.param(object,[prefix];"
      }
    ],
    "description": {
      "full": "<p>Converts an object into a key/value par with an optional prefix.  Used for converting objects to a query string<br />            <div class=\"highlight\"><pre lang=\"\">            var obj={<br />            foo:\"foo\",<br />            bar:\"bar\"<br />            }<br />            var kvp=$.param(obj,\"data\");<br />            </pre></div></p>",
      "summary": "<p>Converts an object into a key/value par with an optional prefix.  Used for converting objects to a query string<br />            <div class=\"highlight\"><pre lang=\"\">            var obj={<br />            foo:\"foo\",<br />            bar:\"bar\"<br />            }<br />            var kvp=$.param(obj,\"data\");<br />            </pre></div></p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "$.param = function(obj, prefix) {\n            var str = [];\n            if (obj instanceof $afm) {\n                obj.each(function() {\n                    var k = prefix ? prefix + \"[\" + this.id + \"]\" : this.id,\n                        v = this.value;\n                    str.push((k) + \"=\" + encodeURIComponent(v));\n                });\n            } else {\n                for (var p in obj) {\n\n                    if ($.isFunction(obj[p]))\n                        continue;\n                    var k = prefix ? prefix + \"[\" + p + \"]\" : p,\n                        v = obj[p];\n                    str.push($.isObject(v) ? $.param(v, k) : (k) + \"=\" + encodeURIComponent(v));\n                }\n            }\n            return str.join(\"&\");\n        };"
  },
  {
    "tags": [
      {
        "type": "params",
        "string": "{String} string"
      },
      {
        "type": "return",
        "types": [
          "Object"
        ],
        "description": ""
      },
      {
        "type": "title",
        "string": "$.parseJSON(string)"
      }
    ],
    "description": {
      "full": "<p>Used for backwards compatibility.  Uses native JSON.parse function<br />            <div class=\"highlight\"><pre lang=\"\">            var obj=$.parseJSON(\"{\\\"bar\\\":\\\"bar\\\"}\");<br />            </pre></div></p>",
      "summary": "<p>Used for backwards compatibility.  Uses native JSON.parse function<br />            <div class=\"highlight\"><pre lang=\"\">            var obj=$.parseJSON(\"{\\\"bar\\\":\\\"bar\\\"}\");<br />            </pre></div></p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "$.parseJSON = function(string) {\n            return JSON.parse(string);\n        };"
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "String"
        ],
        "name": "string",
        "description": ""
      },
      {
        "type": "return",
        "types": [
          "Object"
        ],
        "description": "DOM nodes"
      },
      {
        "type": "title",
        "string": "$.parseXML(string)"
      }
    ],
    "description": {
      "full": "<p>Helper function to convert XML into  the DOM node representation<br />            <div class=\"highlight\"><pre lang=\"\">            var xmlDoc=$.parseXML(\"<xml><foo>bar</foo></xml>\");<br />            </pre></div></p>",
      "summary": "<p>Helper function to convert XML into  the DOM node representation<br />            <div class=\"highlight\"><pre lang=\"\">            var xmlDoc=$.parseXML(\"<xml><foo>bar</foo></xml>\");<br />            </pre></div></p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "$.parseXML = function(string) {\n            if (isWin8) {\n                MSApp.execUnsafeLocalFunction(function() {\n                    return (new DOMParser()).parseFromString(string, \"text/xml\");\n                });\n            } else\n                return (new DOMParser()).parseFromString(string, \"text/xml\");\n        };"
  },
  {
    "tags": [
      {
        "type": "api",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "<p>Helper function to parse the user agent.  Sets the following<br />.os.webkit<br />.os.android<br />.os.ipad<br />.os.iphone<br />.os.webos<br />.os.touchpad<br />.os.blackberry<br />.os.opera<br />.os.fennec<br />.os.ie<br />.os.ieTouch<br />.os.supportsTouch<br />.os.playbook<br />.os.tizen<br />.feat.nativeTouchScroll</p>",
      "summary": "<p>Helper function to parse the user agent.  Sets the following<br />.os.webkit<br />.os.android<br />.os.ipad<br />.os.iphone<br />.os.webos<br />.os.touchpad<br />.os.blackberry<br />.os.opera<br />.os.fennec<br />.os.ie<br />.os.ieTouch<br />.os.supportsTouch<br />.os.playbook<br />.os.tizen<br />.feat.nativeTouchScroll</p>",
      "body": ""
    },
    "isPrivate": true,
    "ignore": false,
    "code": "function detectUA($, userAgent) {\n            $.os = {};\n            $.os.webkit = userAgent.match(/WebKit\\/([\\d.]+)/) ? true : false;\n            $.os.android = userAgent.match(/(Android)\\s+([\\d.]+)/) || userAgent.match(/Silk-Accelerated/) ? true : false;\n            $.os.androidICS = $.os.android && userAgent.match(/(Android)\\s4/) ? true : false;\n            $.os.ipad = userAgent.match(/(iPad).*OS\\s([\\d_]+)/) ? true : false;\n            $.os.iphone = !$.os.ipad && userAgent.match(/(iPhone\\sOS)\\s([\\d_]+)/) ? true : false;\n            $.os.ios7 = ($.os.ipad||$.os.iphone)&&userAgent.match(/7_/) ? true : false;\n            $.os.webos = userAgent.match(/(webOS|hpwOS)[\\s\\/]([\\d.]+)/) ? true : false;\n            $.os.touchpad = $.os.webos && userAgent.match(/TouchPad/) ? true : false;\n            $.os.ios = $.os.ipad || $.os.iphone;\n            $.os.playbook = userAgent.match(/PlayBook/) ? true : false;\n            $.os.blackberry10 = userAgent.match(/BB10/) ? true : false;\n            $.os.blackberry = $.os.playbook || $.os.blackberry10|| userAgent.match(/BlackBerry/) ? true : false;\n            $.os.chrome = userAgent.match(/Chrome/) ? true : false;\n            $.os.opera = userAgent.match(/Opera/) ? true : false;\n            $.os.fennec = userAgent.match(/fennec/i) ? true : userAgent.match(/Firefox/) ? true : false;\n            $.os.ie = userAgent.match(/MSIE 10.0/i)||userAgent.match(/Trident\\/7/i) ? true : false;\n            $.os.ieTouch = $.os.ie && userAgent.toLowerCase().match(/touch/i) ? true : false;\n            $.os.tizen = userAgent.match(/Tizen/i)?true:false;\n            $.os.supportsTouch = ((window.DocumentTouch && document instanceof window.DocumentTouch) || \"ontouchstart\" in window);\n            $.os.kindle=userAgent.match(/Silk-Accelerated/)?true:false;\n            //features\n            $.feat = {};\n            var head = document.documentElement.getElementsByTagName(\"head\")[0];\n            $.feat.nativeTouchScroll = typeof(head.style[\"-webkit-overflow-scrolling\"]) !== \"undefined\" && ($.os.ios||$.os.blackberry10);\n            $.feat.cssPrefix = $.os.webkit ? \"Webkit\" : $.os.fennec ? \"Moz\" : $.os.ie ? \"ms\" : $.os.opera ? \"O\" : \"\";\n            $.feat.cssTransformStart = !$.os.opera ? \"3d(\" : \"(\";\n            $.feat.cssTransformEnd = !$.os.opera ? \",0)\" : \")\";\n            if ($.os.android && !$.os.webkit)\n                $.os.android = false;\n            var items=[\"Webkit\",\"Moz\",\"ms\",\"O\"];\n            for(var j=0;j<items.length;j++){\n                if(document.documentElement.style[items[j]+\"Transform\"]===\"\")\n                    $.feat.cssPrefix=items[j];\n            }\n\n        }\n\n        detectUA($, navigator.userAgent);\n        $.__detectUA = detectUA; //needed for unit tests",
    "ctx": {
      "type": "function",
      "name": "detectUA",
      "string": "detectUA()"
    }
  },
  {
    "tags": [
      {
        "type": "title",
        "string": "$.uuid"
      }
    ],
    "description": {
      "full": "<p>Utility function to create a psuedo GUID<br />           <div class=\"highlight\"><pre lang=\"\">           var id= $.uuid();<br />           </pre></div></p>",
      "summary": "<p>Utility function to create a psuedo GUID<br />           <div class=\"highlight\"><pre lang=\"\">           var id= $.uuid();<br />           </pre></div></p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "$.uuid = function() {\n            var S4 = function() {\n                return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\n            };\n            return (S4() + S4() + \"-\" + S4() + \"-\" + S4() + \"-\" + S4() + \"-\" + S4() + S4() + S4());\n        };"
  },
  {
    "tags": [],
    "description": {
      "full": "<p>Gets the css matrix, or creates a fake one<br />           <div class=\"highlight\"><pre lang=\"\">           $.getCssMatrix(domElement)<br />           </pre></div><br />           @returns matrix with postion</p>",
      "summary": "<p>Gets the css matrix, or creates a fake one<br />           <div class=\"highlight\"><pre lang=\"\">           $.getCssMatrix(domElement)<br />           </pre></div><br />           @returns matrix with postion</p>",
      "body": ""
    },
    "ignore": false,
    "code": "$.getCssMatrix = function(ele) {\n            if ($.is$(ele)) ele = ele.get(0);\n\n            var matrixFn = window.WebKitCSSMatrix || window.MSCSSMatrix;\n\n            if (ele === nundefined) {\n                if (matrixFn) {\n                    return new matrixFn();\n                }\n                else {\n                    return {\n                        a: 0,\n                        b: 0,\n                        c: 0,\n                        d: 0,\n                        e: 0,\n                        f: 0\n                    };\n                }\n            }\n\n            var computedStyle = window.getComputedStyle(ele);\n\n            var transform = computedStyle.webkitTransform ||\n                            computedStyle.transform ||\n                            computedStyle[$.feat.cssPrefix + \"Transform\"];\n\n            if (matrixFn)\n                return new matrixFn(transform);\n            else if (transform) {\n                //fake css matrix\n                var mat = transform.replace(/[^0-9\\-.,]/g, \"\").split(\",\");\n                return {\n                    a: +mat[0],\n                    b: +mat[1],\n                    c: +mat[2],\n                    d: +mat[3],\n                    e: +mat[4],\n                    f: +mat[5]\n                };\n            }\n            else {\n                return {\n                    a: 0,\n                    b: 0,\n                    c: 0,\n                    d: 0,\n                    e: 0,\n                    f: 0\n                };\n            }\n        };"
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "String"
        ],
        "name": "DOM",
        "description": "Element type or html"
      },
      {
        "type": "param",
        "types": [
          "[Object]"
        ],
        "name": "properties",
        "description": "to apply to the element"
      },
      {
        "type": "return",
        "types": [
          "Object"
        ],
        "description": "Returns an appframework object"
      },
      {
        "type": "title",
        "string": "$.create(type,[params])"
      }
    ],
    "description": {
      "full": "<p>$.create - a faster alertnative to $(\"<div id=\"main\">this is some text</div>\");<br />          <div class=\"highlight\"><pre lang=\"\">          $.create(\"div\",{id:\"main\",innerHTML:\"this is some text\"});<br />          $.create(\"<div id=\"main\">this is some text</div>\");<br />          </pre></div></p>",
      "summary": "<p>$.create - a faster alertnative to $(\"<div id=\"main\">this is some text</div>\");<br />          <div class=\"highlight\"><pre lang=\"\">          $.create(\"div\",{id:\"main\",innerHTML:\"this is some text\"});<br />          $.create(\"<div id=\"main\">this is some text</div>\");<br />          </pre></div></p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "$.create = function(type, props) {\n            var elem;\n            var f = new $afm();\n            if (props || type[0] !== \"<\") {\n                if (props.html){\n                    props.innerHTML = props.html;\n                    delete props.html;\n                }\n\n                elem = document.createElement(type);\n                for (var j in props) {\n                    elem[j] = props[j];\n                }\n                f[f.length++] = elem;\n            } else {\n                elem = document.createElement(\"div\");\n                if (isWin8) {\n                    MSApp.execUnsafeLocalFunction(function() {\n                        elem.innerHTML = type.trim();\n                    });\n                } else\n                    elem.innerHTML = type;\n                _shimNodes(elem.childNodes, f);\n            }\n            return f;\n        };"
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "String"
        ],
        "name": "selector",
        "description": ""
      },
      {
        "type": "param",
        "types": [
          "Object"
        ],
        "name": "[context]",
        "description": ""
      },
      {
        "type": "return",
        "types": [
          "Object"
        ],
        "description": "Returns an appframework object"
      },
      {
        "type": "title",
        "string": "$.query(selector,[context])"
      }
    ],
    "description": {
      "full": "<p>$.query  - a faster alertnative to $(\"div\");<br />          <div class=\"highlight\"><pre lang=\"\">          $.query(\".panel\");<br />          </pre></div></p>",
      "summary": "<p>$.query  - a faster alertnative to $(\"div\");<br />          <div class=\"highlight\"><pre lang=\"\">          $.query(\".panel\");<br />          </pre></div></p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "$.query = function(sel, what) {\n            if (!sel)\n                return new $afm();\n            what = what || document;\n            var f = new $afm();\n            return f.selector(sel, what);\n        };"
  },
  {
    "tags": [],
    "description": {
      "full": "<p>Zepto.js events<br />         @api private</p>",
      "summary": "<p>Zepto.js events<br />         @api private</p>",
      "body": ""
    },
    "ignore": false,
    "code": "//The following is modified from Zepto.js / events.js\n        //We've removed depricated  events like .live and allow anonymous functions to be removed\n        var handlers = {},\n            _afmid = 1;"
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "Object"
        ],
        "name": "element",
        "description": ""
      },
      {
        "type": "return",
        "types": [
          "Int"
        ],
        "description": "afmid"
      },
      {
        "type": "api",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "<p>Gets or sets the expando property on a javascript element<br />Also increments the internal counter for elements;</p>",
      "summary": "<p>Gets or sets the expando property on a javascript element<br />Also increments the internal counter for elements;</p>",
      "body": ""
    },
    "isPrivate": true,
    "ignore": false,
    "code": "function afmid(element) {\n            return element._afmid || (element._afmid = _afmid++);\n        }",
    "ctx": {
      "type": "function",
      "name": "afmid",
      "string": "afmid()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "Object"
        ],
        "name": "element",
        "description": ""
      },
      {
        "type": "param",
        "types": [
          "String"
        ],
        "name": "[event]",
        "description": ""
      },
      {
        "type": "param",
        "types": [
          "Function"
        ],
        "name": "[function]",
        "description": ""
      },
      {
        "type": "param",
        "types": [
          "String",
          "Object",
          "Array"
        ],
        "name": "[selector]",
        "description": ""
      },
      {
        "type": "return",
        "types": [
          "Function",
          "null"
        ],
        "description": "handler function or false if not found"
      },
      {
        "type": "api",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "<p>Searches through a local array that keeps track of event handlers for proxying.<br />Since we listen for multiple events, we match up the event, function and selector.<br />This is used to find, execute, remove proxied event functions</p>",
      "summary": "<p>Searches through a local array that keeps track of event handlers for proxying.<br />Since we listen for multiple events, we match up the event, function and selector.<br />This is used to find, execute, remove proxied event functions</p>",
      "body": ""
    },
    "isPrivate": true,
    "ignore": false,
    "code": "function findHandlers(element, event, fn, selector) {\n            event = parse(event);\n            if (event.ns)\n                var matcher = matcherFor(event.ns);\n            return (handlers[afmid(element)] || []).filter(function(handler) {\n                return handler && (!event.e || handler.e === event.e) && (!event.ns || matcher.test(handler.ns)) && (!fn || handler.fn === fn || (typeof handler.fn === \"function\" && typeof fn === \"function\" && handler.fn === fn)) && (!selector || handler.sel === selector);\n            });\n        }",
    "ctx": {
      "type": "function",
      "name": "findHandlers",
      "string": "findHandlers()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "String"
        ],
        "name": "event",
        "description": ""
      },
      {
        "type": "return",
        "types": [
          "Object"
        ],
        "description": "an object with the event name and namespace"
      },
      {
        "type": "api",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "<p>Splits an event name by \".\" to look for namespaces (e.g touch.click)</p>",
      "summary": "<p>Splits an event name by \".\" to look for namespaces (e.g touch.click)</p>",
      "body": ""
    },
    "isPrivate": true,
    "ignore": false,
    "code": "function parse(event) {\n            var parts = (\"\" + event).split(\".\");\n            return {\n                e: parts[0],\n                ns: parts.slice(1).sort().join(\" \")\n            };\n        }",
    "ctx": {
      "type": "function",
      "name": "parse",
      "string": "parse()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "String"
        ],
        "name": "namespace",
        "description": ""
      },
      {
        "type": "return",
        "types": [
          "Regex"
        ],
        "description": "regular expression"
      },
      {
        "type": "api",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "<p>Regular expression checker for event namespace checking</p>",
      "summary": "<p>Regular expression checker for event namespace checking</p>",
      "body": ""
    },
    "isPrivate": true,
    "ignore": false,
    "code": "function matcherFor(ns) {\n            return new RegExp(\"(?:^| )\" + ns.replace(\" \", \" .* ?\") + \"(?: |$)\");\n        }",
    "ctx": {
      "type": "function",
      "name": "matcherFor",
      "string": "matcherFor()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "String",
          "Object"
        ],
        "name": "events",
        "description": ""
      },
      {
        "type": "param",
        "types": [
          "Function"
        ],
        "name": "fn",
        "description": ""
      },
      {
        "type": "param",
        "types": [
          "Iterator"
        ],
        "name": "[iterator]",
        "description": ""
      },
      {
        "type": "api",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "<p>Utility function that will loop through events that can be a hash or space delimited and executes the function</p>",
      "summary": "<p>Utility function that will loop through events that can be a hash or space delimited and executes the function</p>",
      "body": ""
    },
    "isPrivate": true,
    "ignore": false,
    "code": "function eachEvent(events, fn, iterator) {\n            if ($.isObject(events))\n                $.each(events, iterator);\n            else\n                events.split(/\\s/).forEach(function(type) {\n                    iterator(type, fn);\n                });\n        }",
    "ctx": {
      "type": "function",
      "name": "eachEvent",
      "string": "eachEvent()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "Object"
        ],
        "name": "element",
        "description": ""
      },
      {
        "type": "param",
        "types": [
          "String",
          "Object"
        ],
        "name": "events",
        "description": ""
      },
      {
        "type": "param",
        "types": [
          "Function"
        ],
        "name": "function",
        "description": "that will be executed when event triggers"
      },
      {
        "type": "param",
        "types": [
          "String",
          "Array",
          "Object"
        ],
        "name": "[selector]",
        "description": ""
      },
      {
        "type": "param",
        "types": [
          "Function"
        ],
        "name": "[getDelegate]",
        "description": ""
      },
      {
        "type": "api",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "<p>Helper function for adding an event and creating the proxy handler function.<br />All event handlers call this to wire event listeners up.  We create proxy handlers so they can be removed then.<br />This is needed for delegate/on</p>",
      "summary": "<p>Helper function for adding an event and creating the proxy handler function.<br />All event handlers call this to wire event listeners up.  We create proxy handlers so they can be removed then.<br />This is needed for delegate/on</p>",
      "body": ""
    },
    "isPrivate": true,
    "ignore": false,
    "code": "function add(element, events, fn, selector, getDelegate) {\n\n            var id = afmid(element),\n                set = (handlers[id] || (handlers[id] = []));\n            eachEvent(events, fn, function(event, fn) {\n                var delegate = getDelegate && getDelegate(fn, event),\n                    callback = delegate || fn;\n                var proxyfn = function(event) {\n                    var result = callback.apply(element, [event].concat(event.data));\n                    if (result === false)\n                        event.preventDefault();\n                    return result;\n                };\n                var handler = $.extend(parse(event), {\n                    fn: fn,\n                    proxy: proxyfn,\n                    sel: selector,\n                    del: delegate,\n                    i: set.length\n                });\n                set.push(handler);\n                element.addEventListener(handler.e, proxyfn, false);\n            });\n            element=null;\n        }",
    "ctx": {
      "type": "function",
      "name": "add",
      "string": "add()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "Object"
        ],
        "name": "element",
        "description": ""
      },
      {
        "type": "param",
        "types": [
          "String",
          "Object"
        ],
        "name": "events",
        "description": ""
      },
      {
        "type": "param",
        "types": [
          "Function"
        ],
        "name": "[fn]",
        "description": ""
      },
      {
        "type": "param",
        "types": [
          "String",
          "Array",
          "Object"
        ],
        "name": "[selector]",
        "description": ""
      },
      {
        "type": "api",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "<p>Helper function to remove event listeners.  We look through each event and then the proxy handler array to see if it exists<br />If found, we remove the listener and the entry from the proxy array.  If no function is specified, we remove all listeners that match</p>",
      "summary": "<p>Helper function to remove event listeners.  We look through each event and then the proxy handler array to see if it exists<br />If found, we remove the listener and the entry from the proxy array.  If no function is specified, we remove all listeners that match</p>",
      "body": ""
    },
    "isPrivate": true,
    "ignore": false,
    "code": "function remove(element, events, fn, selector) {\n\n            var id = afmid(element);\n            eachEvent(events || \"\", fn, function(event, fn) {\n                findHandlers(element, event, fn, selector).forEach(function(handler) {\n                    delete handlers[id][handler.i];\n                    element.removeEventListener(handler.e, handler.proxy, false);\n                });\n            });\n        }\n\n        $.event = {\n            add: add,\n            remove: remove\n        };",
    "ctx": {
      "type": "function",
      "name": "remove",
      "string": "remove()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "String",
          "Object"
        ],
        "name": "event",
        "description": ""
      },
      {
        "type": "param",
        "types": [
          "Function"
        ],
        "name": "callback",
        "description": ""
      },
      {
        "type": "return",
        "types": [
          "Object"
        ],
        "description": "appframework object"
      },
      {
        "type": "title",
        "string": "$().bind(event,callback)"
      }
    ],
    "description": {
      "full": "<p>Binds an event to each element in the collection and executes the callback<br />            <div class=\"highlight\"><pre lang=\"\">            $().bind(\"click\",function(){console.log(\"I clicked \"+this.id);});<br />            </pre></div></p>",
      "summary": "<p>Binds an event to each element in the collection and executes the callback<br />            <div class=\"highlight\"><pre lang=\"\">            $().bind(\"click\",function(){console.log(\"I clicked \"+this.id);});<br />            </pre></div></p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "$.fn.bind = function(event, callback) {\n            for (var i = 0, len = this.length; i < len; i++) {\n                add(this[i], event, callback);\n            }\n            return this;\n        };"
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "String",
          "Object"
        ],
        "name": "event",
        "description": ""
      },
      {
        "type": "param",
        "types": [
          "Function"
        ],
        "name": "[callback]",
        "description": ""
      },
      {
        "type": "return",
        "types": [
          "Object"
        ],
        "description": "appframework object"
      },
      {
        "type": "title",
        "string": "$().unbind(event,[callback]);"
      }
    ],
    "description": {
      "full": "<p>Unbinds an event to each element in the collection.  If a callback is passed in, we remove just that one, otherwise we remove all callbacks for those events<br />            <div class=\"highlight\"><pre lang=\"\">            $().unbind(\"click\"); //Unbinds all click events<br />            $().unbind(\"click\",myFunc); //Unbinds myFunc<br />            </pre></div></p>",
      "summary": "<p>Unbinds an event to each element in the collection.  If a callback is passed in, we remove just that one, otherwise we remove all callbacks for those events<br />            <div class=\"highlight\"><pre lang=\"\">            $().unbind(\"click\"); //Unbinds all click events<br />            $().unbind(\"click\",myFunc); //Unbinds myFunc<br />            </pre></div></p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "$.fn.unbind = function(event, callback) {\n            for (var i = 0, len = this.length; i < len; i++) {\n                remove(this[i], event, callback);\n            }\n            return this;\n        };"
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "String",
          "Object"
        ],
        "name": "event",
        "description": ""
      },
      {
        "type": "param",
        "types": [
          "Function"
        ],
        "name": "[callback]",
        "description": ""
      },
      {
        "type": "return",
        "types": [
          "appframework"
        ],
        "description": "object"
      },
      {
        "type": "title",
        "string": "$().one(event,callback);"
      }
    ],
    "description": {
      "full": "<p>Binds an event to each element in the collection that will only execute once.  When it executes, we remove the event listener then right away so it no longer happens<br />            <div class=\"highlight\"><pre lang=\"\">            $().one(\"click\",function(){console.log(\"I was clicked once\");});<br />            </pre></div></p>",
      "summary": "<p>Binds an event to each element in the collection that will only execute once.  When it executes, we remove the event listener then right away so it no longer happens<br />            <div class=\"highlight\"><pre lang=\"\">            $().one(\"click\",function(){console.log(\"I was clicked once\");});<br />            </pre></div></p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "$.fn.one = function(event, callback) {\n            return this.each(function(i, element) {\n                add(this, event, callback, null, function(fn, type) {\n                    return function() {\n                        remove(element, type, fn);\n                        var result = fn.apply(element, arguments);\n                        return result;\n                    };\n                });\n            });\n        };"
  },
  {
    "tags": [
      {
        "type": "api",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "<p>internal variables</p>",
      "summary": "<p>internal variables</p>",
      "body": ""
    },
    "isPrivate": true,
    "ignore": false,
    "code": "var returnTrue = function() {\n            return true;\n        };\n        var returnFalse = function() {\n            return false;\n        };\n        var eventMethods = {\n            preventDefault: \"isDefaultPrevented\",\n            stopImmediatePropagation: \"isImmediatePropagationStopped\",\n            stopPropagation: \"isPropagationStopped\"\n        };",
    "ctx": {
      "type": "function",
      "name": "returnTrue",
      "string": "returnTrue()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "String"
        ],
        "name": "event",
        "description": ""
      },
      {
        "type": "return",
        "types": [
          "Function"
        ],
        "description": "proxy"
      },
      {
        "type": "api",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "<p>Creates a proxy function for event handlers.<br />As \"some\" browsers dont support event.stopPropagation this call is bypassed if it cant be found on the event object.</p>",
      "summary": "<p>Creates a proxy function for event handlers.<br />As \"some\" browsers dont support event.stopPropagation this call is bypassed if it cant be found on the event object.</p>",
      "body": ""
    },
    "isPrivate": true,
    "ignore": false,
    "code": "function createProxy(event) {\n            var proxy = $.extend({\n                originalEvent: event\n            }, event);\n            $.each(eventMethods, function(name, predicate) {\n                proxy[name] = function() {\n                    this[predicate] = returnTrue;\n                    if (name === \"stopImmediatePropagation\" || name === \"stopPropagation\") {\n                        event.cancelBubble = true;\n                        if (!event[name])\n                            return;\n                    }\n                    return event[name].apply(event, arguments);\n                };\n                proxy[predicate] = returnFalse;\n            });\n            return proxy;\n        }",
    "ctx": {
      "type": "function",
      "name": "createProxy",
      "string": "createProxy()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "String",
          "Array",
          "Object"
        ],
        "name": "selector",
        "description": ""
      },
      {
        "type": "param",
        "types": [
          "String",
          "Object"
        ],
        "name": "event",
        "description": ""
      },
      {
        "type": "param",
        "types": [
          "Object"
        ],
        "name": "data",
        "description": ""
      },
      {
        "type": "param",
        "types": [
          "Function"
        ],
        "name": "callback",
        "description": ""
      },
      {
        "type": "return",
        "types": [
          "Object"
        ],
        "description": "appframework object"
      },
      {
        "type": "title",
        "string": "$().delegate(selector,event,[data],callback)"
      }
    ],
    "description": {
      "full": "<p>Delegate an event based off the selector.  The event will be registered at the parent level, but executes on the selector.<br />            <div class=\"highlight\"><pre lang=\"\">            $(\"#div\").delegate(\"p\",\"click\",callback);<br />            </pre></div></p>",
      "summary": "<p>Delegate an event based off the selector.  The event will be registered at the parent level, but executes on the selector.<br />            <div class=\"highlight\"><pre lang=\"\">            $(\"#div\").delegate(\"p\",\"click\",callback);<br />            </pre></div></p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "function addDelegate(element,event,callback,selector,data){\n            add(element, event, callback, selector, function(fn) {\n                    return function(e) {\n                        var evt, match = $(e.target).closest(selector, element).get(0);\n                        if (match) {\n                            evt = $.extend(createProxy(e), {\n                                currentTarget: match,\n                                liveFired: element,\n                                delegateTarget:element,\n                                data:data\n                            });\n                            return fn.apply(match, [evt].concat([].slice.call(arguments, 1)));\n                        }\n                    };\n                });\n        }\n        $.fn.delegate = function(selector, event, data, callback) {\n            if ($.isFunction(data)) {\n                callback = data;\n                data = null;\n            }\n            for (var i = 0, len = this.length; i < len; i++) {\n                addDelegate(this[i],event,callback,selector,data);\n            }\n            return this;\n        };",
    "ctx": {
      "type": "function",
      "name": "addDelegate",
      "string": "addDelegate()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "String",
          "Array",
          "Object"
        ],
        "name": "selector",
        "description": ""
      },
      {
        "type": "param",
        "types": [
          "String",
          "Object"
        ],
        "name": "event",
        "description": ""
      },
      {
        "type": "param",
        "types": [
          "Function"
        ],
        "name": "callback",
        "description": ""
      },
      {
        "type": "return",
        "types": [
          "Object"
        ],
        "description": "appframework object"
      },
      {
        "type": "title",
        "string": "$().undelegate(selector,event,[callback]);"
      }
    ],
    "description": {
      "full": "<p>Unbinds events that were registered through delegate.  It acts upon the selector and event.  If a callback is specified, it will remove that one, otherwise it removes all of them.<br />            <div class=\"highlight\"><pre lang=\"\">            $(\"#div\").undelegate(\"p\",\"click\",callback);//Undelegates callback for the click event<br />            $(\"#div\").undelegate(\"p\",\"click\");//Undelegates all click events<br />            </pre></div></p>",
      "summary": "<p>Unbinds events that were registered through delegate.  It acts upon the selector and event.  If a callback is specified, it will remove that one, otherwise it removes all of them.<br />            <div class=\"highlight\"><pre lang=\"\">            $(\"#div\").undelegate(\"p\",\"click\",callback);//Undelegates callback for the click event<br />            $(\"#div\").undelegate(\"p\",\"click\");//Undelegates all click events<br />            </pre></div></p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "$.fn.undelegate = function(selector, event, callback) {\n            for (var i = 0, len = this.length; i < len; i++) {\n                remove(this[i], event, callback, selector);\n            }\n            return this;\n        };"
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "String",
          "Array",
          "Object"
        ],
        "name": "selector",
        "description": ""
      },
      {
        "type": "param",
        "types": [
          "String",
          "Object"
        ],
        "name": "event",
        "description": ""
      },
      {
        "type": "param",
        "types": [
          "Object"
        ],
        "name": "data",
        "description": ""
      },
      {
        "type": "param",
        "types": [
          "Function"
        ],
        "name": "callback",
        "description": ""
      },
      {
        "type": "return",
        "types": [
          "Object"
        ],
        "description": "appframework object"
      },
      {
        "type": "title",
        "string": "$().on(event,selector,[data],callback);"
      }
    ],
    "description": {
      "full": "<p>Similar to delegate, but the function parameter order is easier to understand.<br />If selector is undefined or a function, we just call .bind, otherwise we use .delegate<br />            <div class=\"highlight\"><pre lang=\"\">            $(\"#div\").on(\"click\",\"p\",callback);<br />            </pre></div></p>",
      "summary": "<p>Similar to delegate, but the function parameter order is easier to understand.<br />If selector is undefined or a function, we just call .bind, otherwise we use .delegate<br />            <div class=\"highlight\"><pre lang=\"\">            $(\"#div\").on(\"click\",\"p\",callback);<br />            </pre></div></p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "$.fn.on = function(event, selector, data, callback) {\n            if ($.isFunction(data)) {\n                callback = data;\n                data = null;\n            }\n\n            return selector === nundefined || $.isFunction(selector) ? this.bind(event, selector) : this.delegate(selector, event, data,callback);\n        };"
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "String",
          "Object"
        ],
        "name": "event",
        "description": ""
      },
      {
        "type": "param",
        "types": [
          "String",
          "Array",
          "Object"
        ],
        "name": "selector",
        "description": ""
      },
      {
        "type": "param",
        "types": [
          "Sunction"
        ],
        "name": "callback",
        "description": ""
      },
      {
        "type": "return",
        "types": [
          "Object"
        ],
        "description": "appframework object"
      },
      {
        "type": "title",
        "string": "$().off(event,selector,[callback])"
      }
    ],
    "description": {
      "full": "<p>Removes event listeners for .on()<br />If selector is undefined or a function, we call unbind, otherwise it\"s undelegate<br />            <div class=\"highlight\"><pre lang=\"\">            $().off(\"click\",\"p\",callback); //Remove callback function for click events<br />            $().off(\"click\",\"p\") //Remove all click events<br />            </pre></div></p>",
      "summary": "<p>Removes event listeners for .on()<br />If selector is undefined or a function, we call unbind, otherwise it\"s undelegate<br />            <div class=\"highlight\"><pre lang=\"\">            $().off(\"click\",\"p\",callback); //Remove callback function for click events<br />            $().off(\"click\",\"p\") //Remove all click events<br />            </pre></div></p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "$.fn.off = function(event, selector, callback) {\n            return selector === nundefined || $.isFunction(selector) ? this.unbind(event, selector) : this.undelegate(selector, event, callback);\n        };"
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "String",
          "Object"
        ],
        "name": "event",
        "description": ""
      },
      {
        "type": "param",
        "types": [
          "Object"
        ],
        "name": "[data]",
        "description": ""
      },
      {
        "type": "return",
        "types": [
          "Object"
        ],
        "description": "appframework object"
      },
      {
        "type": "title",
        "string": "$().trigger(event,data);"
      }
    ],
    "description": {
      "full": "<p>This triggers an event to be dispatched.  Usefull for emulating events, etc.<br />        <div class=\"highlight\"><pre lang=\"\">        $().trigger(\"click\",{foo:\"bar\"});//Trigger the click event and pass in data<br />        </pre></div></p>",
      "summary": "<p>This triggers an event to be dispatched.  Usefull for emulating events, etc.<br />        <div class=\"highlight\"><pre lang=\"\">        $().trigger(\"click\",{foo:\"bar\"});//Trigger the click event and pass in data<br />        </pre></div></p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "$.fn.trigger = function(event, data, props) {\n            if (typeof event === \"string\")\n                event = $.Event(event, props);\n            event.data = data;\n            for (var i = 0, len = this.length; i < len; i++) {\n                this[i].dispatchEvent(event);\n            }\n            return this;\n        };"
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "String"
        ],
        "name": "type",
        "description": ""
      },
      {
        "type": "param",
        "types": [
          "Object"
        ],
        "name": "[properties]",
        "description": ""
      },
      {
        "type": "return",
        "types": [
          "event"
        ],
        "description": "a custom event that can then be dispatched"
      },
      {
        "type": "api",
        "visibility": "private"
      },
      {
        "type": "title",
        "string": "$.Event(type,props);"
      }
    ],
    "description": {
      "full": "<p>Creates a custom event to be used internally.<br />         <div class=\"highlight\"><pre lang=\"\">         $.Event('MouseEvent');<br />         </pre></div></p>",
      "summary": "<p>Creates a custom event to be used internally.<br />         <div class=\"highlight\"><pre lang=\"\">         $.Event('MouseEvent');<br />         </pre></div></p>",
      "body": ""
    },
    "isPrivate": true,
    "ignore": false,
    "code": "$.Event = function(type, props) {\n            var event = document.createEvent(\"Events\"),\n                bubbles = true;\n            if (props)\n                for (var name in props)\n                    (name === \"bubbles\") ? (bubbles = !! props[name]) : (event[name] = props[name]);\n            event.initEvent(type, bubbles, true, null, null, null, null, null, null, null, null, null, null, null, null);\n            return event;\n        };"
  },
  {
    "tags": [
      {
        "type": "api",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "<p>The following are for objects and not DOM nodes</p>",
      "summary": "<p>The following are for objects and not DOM nodes</p>",
      "body": ""
    },
    "isPrivate": true,
    "ignore": false
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "Object"
        ],
        "name": "object",
        "description": ""
      },
      {
        "type": "param",
        "types": [
          "String"
        ],
        "name": "event",
        "description": "name"
      },
      {
        "type": "param",
        "types": [
          "Function"
        ],
        "name": "function",
        "description": "to execute"
      },
      {
        "type": "title",
        "string": "$.bind(object,event,function);"
      }
    ],
    "description": {
      "full": "<p>Bind an event to an object instead of a DOM Node<br />           <div class=\"highlight\"><pre lang=\"\">           $.bind(this,\"event\",function(){});<br />           </pre></div></p>",
      "summary": "<p>Bind an event to an object instead of a DOM Node<br />           <div class=\"highlight\"><pre lang=\"\">           $.bind(this,\"event\",function(){});<br />           </pre></div></p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "$.bind = function(obj, ev, f) {\n            if (!obj) return;\n            if (!obj.__events) obj.__events = {};\n            if (!$.isArray(ev)) ev = [ev];\n            for (var i = 0; i < ev.length; i++) {\n                if (!obj.__events[ev[i]]) obj.__events[ev[i]] = [];\n                obj.__events[ev[i]].push(f);\n            }\n        };"
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "Object"
        ],
        "name": "object",
        "description": ""
      },
      {
        "type": "param",
        "types": [
          "String"
        ],
        "name": "event",
        "description": "name"
      },
      {
        "type": "param",
        "types": [
          "Array"
        ],
        "name": "arguments",
        "description": ""
      },
      {
        "type": "title",
        "string": "$.trigger(object,event,argments);"
      }
    ],
    "description": {
      "full": "<p>Trigger an event to an object instead of a DOM Node<br />           <div class=\"highlight\"><pre lang=\"\">           $.trigger(this,\"event\",arguments);<br />           </pre></div></p>",
      "summary": "<p>Trigger an event to an object instead of a DOM Node<br />           <div class=\"highlight\"><pre lang=\"\">           $.trigger(this,\"event\",arguments);<br />           </pre></div></p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "$.trigger = function(obj, ev, args) {\n            if (!obj) return;\n            var ret = true;\n            if (!obj.__events) return ret;\n            if (!$.isArray(ev)) ev = [ev];\n            if (!$.isArray(args)) args = [];\n            for (var i = 0; i < ev.length; i++) {\n                if (obj.__events[ev[i]]) {\n                    var evts = obj.__events[ev[i]].slice(0);\n                    for (var j = 0; j < evts.length; j++)\n                        if ($.isFunction(evts[j]) && evts[j].apply(obj, args) === false)\n                            ret = false;\n                }\n            }\n            return ret;\n        };"
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "Object"
        ],
        "name": "object",
        "description": ""
      },
      {
        "type": "param",
        "types": [
          "String"
        ],
        "name": "event",
        "description": "name"
      },
      {
        "type": "param",
        "types": [
          "Function"
        ],
        "name": "function",
        "description": "to execute"
      },
      {
        "type": "title",
        "string": "$.unbind(object,event,function);"
      }
    ],
    "description": {
      "full": "<p>Unbind an event to an object instead of a DOM Node<br />           <div class=\"highlight\"><pre lang=\"\">           $.unbind(this,\"event\",function(){});<br />           </pre></div></p>",
      "summary": "<p>Unbind an event to an object instead of a DOM Node<br />           <div class=\"highlight\"><pre lang=\"\">           $.unbind(this,\"event\",function(){});<br />           </pre></div></p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "$.unbind = function(obj, ev, f) {\n            if (!obj.__events) return;\n            if (!$.isArray(ev)) ev = [ev];\n            for (var i = 0; i < ev.length; i++) {\n                if (obj.__events[ev[i]]) {\n                    var evts = obj.__events[ev[i]];\n                    for (var j = 0; j < evts.length; j++) {\n                        if (f == nundefined)\n                            delete evts[j];\n                        if (evts[j] === f) {\n                            evts.splice(j, 1);\n                            break;\n                        }\n                    }\n                }\n            }\n        };"
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "Function"
        ],
        "name": "callback",
        "description": ""
      },
      {
        "type": "param",
        "types": [
          "Object"
        ],
        "name": "Context",
        "description": ""
      },
      {
        "type": "title",
        "string": "$.proxy(callback,context);"
      }
    ],
    "description": {
      "full": "<p>Creates a proxy function so you can chane \"this\" context in the function<br />            <div class=\"highlight\"><pre lang=\"\">                var newObj={foo:bar}<br />                $(\"#main\").bind(\"click\",$.proxy(function(evt){console.log(this)},newObj);<br />                ( $.proxy(function(foo, bar){console.log(this+foo+bar)}, newObj) )(\"foo\", \"bar\");<br />                ( $.proxy(function(foo, bar){console.log(this+foo+bar)}, newObj, [\"foo\", \"bar\"]) )();<br />            </pre></div></p>",
      "summary": "<p>Creates a proxy function so you can chane \"this\" context in the function<br />            <div class=\"highlight\"><pre lang=\"\">                var newObj={foo:bar}<br />                $(\"#main\").bind(\"click\",$.proxy(function(evt){console.log(this)},newObj);<br />                ( $.proxy(function(foo, bar){console.log(this+foo+bar)}, newObj) )(\"foo\", \"bar\");<br />                ( $.proxy(function(foo, bar){console.log(this+foo+bar)}, newObj, [\"foo\", \"bar\"]) )();<br />            </pre></div></p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "$.proxy = function(f, c, args) {\n            return function() {\n                if (args) return f.apply(c, args); //use provided arguments\n                return f.apply(c, arguments); //use scope function call arguments\n            };\n        };"
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "HTMLDivElement"
        ],
        "name": "the",
        "description": "element to clean up recursively"
      },
      {
        "type": "api",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "<p>Removes listeners on a div and its children recursively<br />            <div class=\"highlight\"><pre lang=\"\">             cleanUpNode(node,kill)<br />            </pre></div></p>",
      "summary": "<p>Removes listeners on a div and its children recursively<br />            <div class=\"highlight\"><pre lang=\"\">             cleanUpNode(node,kill)<br />            </pre></div></p>",
      "body": ""
    },
    "isPrivate": true,
    "ignore": false,
    "code": "function cleanUpNode(node, kill) {\n            //kill it before it lays eggs!\n            if (kill && node.dispatchEvent) {\n                var e = $.Event(\"destroy\", {\n                    bubbles: false\n                });\n                node.dispatchEvent(e);\n            }\n            //cleanup itself\n            var id = afmid(node);\n            if (id && handlers[id]) {\n                for (var key in handlers[id])\n                    node.removeEventListener(handlers[id][key].e, handlers[id][key].proxy, false);\n                delete handlers[id];\n            }\n        }\n\n        function cleanUpContent(node, kill) {\n            if (!node) return;\n            //cleanup children\n            var children = node.childNodes;\n            if (children && children.length > 0) {\n                for (var i; i < children.length; i++) {\n                    cleanUpContent(children[i], kill);\n                }\n            }\n\n            cleanUpNode(node, kill);\n        }\n        var cleanUpAsap = function(els, kill) {\n            for (var i = 0; i < els.length; i++) {\n                cleanUpContent(els[i], kill);\n            }\n        };",
    "ctx": {
      "type": "function",
      "name": "cleanUpNode",
      "string": "cleanUpNode()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "HTMLNode"
        ],
        "name": "node",
        "description": ""
      },
      {
        "type": "param",
        "types": [
          "Bool"
        ],
        "name": "kill",
        "description": "itself"
      },
      {
        "type": "param",
        "types": [
          "bool"
        ],
        "name": "Kill",
        "description": "nodes"
      },
      {
        "type": "title",
        "string": "$.cleanUpContent(node,itself,kill)"
      }
    ],
    "description": {
      "full": "<p>Function to clean up node content to prevent memory leaks<br />           <div class=\"highlight\"><pre lang=\"\">           $.cleanUpContent(node,itself,kill)<br />           </pre></div></p>",
      "summary": "<p>Function to clean up node content to prevent memory leaks<br />           <div class=\"highlight\"><pre lang=\"\">           $.cleanUpContent(node,itself,kill)<br />           </pre></div></p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "$.cleanUpContent = function(node, itself, kill) {\n            if (!node) return;\n            //cleanup children\n            var cn = node.childNodes;\n            if (cn && cn.length > 0) {\n                //destroy everything in a few ms to avoid memory leaks\n                //remove them all and copy objs into new array\n                $.asap(cleanUpAsap, {}, [slice.apply(cn, [0]), kill]);\n            }\n            //cleanUp this node\n            if (itself) cleanUpNode(node, kill);\n        };\n\n        // Like setTimeout(fn, 0); but much faster\n        var timeouts = [];\n        var contexts = [];\n        var params = [];"
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "Function"
        ],
        "name": "function",
        "description": ""
      },
      {
        "type": "param",
        "types": [
          "Object"
        ],
        "name": "context",
        "description": ""
      },
      {
        "type": "param",
        "types": [
          "Array"
        ],
        "name": "arguments",
        "description": ""
      }
    ],
    "description": {
      "full": "<p>This adds a command to execute in the JS stack, but is faster then setTimeout<br />           <div class=\"highlight\"><pre lang=\"\">           $.asap(function,context,args)<br />           </pre></div></p>",
      "summary": "<p>This adds a command to execute in the JS stack, but is faster then setTimeout<br />           <div class=\"highlight\"><pre lang=\"\">           $.asap(function,context,args)<br />           </pre></div></p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "$.asap = function(fn, context, args) {\n            if (!$.isFunction(fn)) throw \"$.asap - argument is not a valid function\";\n            timeouts.push(fn);\n            contexts.push(context ? context : {});\n            params.push(args ? args : []);\n            //post a message to ourselves so we know we have to execute a function from the stack\n            window.postMessage(\"afm-asap\", \"*\");\n        };\n        window.addEventListener(\"message\", function(event) {\n            if (event.source === window && event.data === \"afm-asap\") {\n                event.stopPropagation();\n                if (timeouts.length > 0) { //just in case...\n                    (timeouts.shift()).apply(contexts.shift(), params.shift());\n                }\n            }\n        }, true);"
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "String",
          "DOM"
        ],
        "name": "content",
        "description": ""
      },
      {
        "type": "title",
        "string": "$.parseJS(content);"
      }
    ],
    "description": {
      "full": "<p>this function executes javascript in HTML.<br />           <div class=\"highlight\"><pre lang=\"\">           $.parseJS(content)<br />           </pre></div></p>",
      "summary": "<p>this function executes javascript in HTML.<br />           <div class=\"highlight\"><pre lang=\"\">           $.parseJS(content)<br />           </pre></div></p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "var remoteJSPages = {};\n        $.parseJS = function(div) {\n            if (!div)\n                return;\n            if (typeof(div) === \"string\") {\n                var elem = document.createElement(\"div\");\n                if (isWin8) {\n                    MSApp.execUnsafeLocalFunction(function() {\n                        elem.innerHTML = div;\n                    });\n                } else\n                    elem.innerHTML = div;\n\n                div = elem;\n            }\n            var scripts = div.getElementsByTagName(\"script\");\n            div = null;\n            for (var i = 0; i < scripts.length; i++) {\n                if (scripts[i].src.length > 0 && !remoteJSPages[scripts[i].src] && !isWin8) {\n                    var doc = document.createElement(\"script\");\n                    doc.type = scripts[i].type;\n                    doc.src = scripts[i].src;\n                    document.getElementsByTagName(\"head\")[0].appendChild(doc);\n                    remoteJSPages[scripts[i].src] = 1;\n                    doc = null;\n                } else {\n                    window[\"eval\"](scripts[i].innerHTML);\n                }\n            }\n        };",
    "ctx": {
      "type": "declaration",
      "name": "remoteJSPages",
      "value": "{}",
      "string": "remoteJSPages"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<p>//custom events since people want to do $().click instead of $().bind(\"click\")</p>",
      "summary": "<p>//custom events since people want to do $().click instead of $().bind(\"click\")</p>",
      "body": ""
    },
    "ignore": false,
    "code": "[\"click\", \"keydown\", \"keyup\", \"keypress\", \"submit\", \"load\", \"resize\", \"change\", \"select\", \"error\"].forEach(function(event) {\n            $.fn[event] = function(cb) {\n                return cb ? this.bind(event, cb) : this.trigger(event);\n            };\n        });\n\n\n        [\"focus\", \"blur\"].forEach(function(name) {\n            $.fn[name] = function(callback) {\n                if (this.length === 0) return;\n                if (callback)\n                    this.bind(name, callback);\n                else{\n                    for (var i = 0; i < this.length; i++) {\n                        try {\n                            this[i][name]();\n                        } catch (e) {}\n                    }\n                }\n                return this;\n            };\n        });"
  },
  {
    "tags": [
      {
        "type": "api",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "<p>End of APIS</p>",
      "summary": "<p>End of APIS</p>",
      "body": ""
    },
    "isPrivate": true,
    "ignore": false,
    "code": "return $;\n\n    })(window);\n    window.jq = af; //backwards compat\n    \"$\" in window || (window.$ = af);\n    if (typeof define === \"function\" && define.amd) {\n        define(\"appframework\", [], function() {\n            \"use strict\";\n            return af;\n        });\n    } else if (typeof module !== \"undefined\" && module.exports) {\n        module.exports.af = af;\n        module.exports.$ = af;\n    }\n    //Helper function used in af.mobi.plugins.\n    if (!window.numOnly) {\n        window.numOnly = function numOnly(val) {\n            \"use strict\";\n            if (val === undefined || val === \"\") return 0;\n            if (isNaN(parseFloat(val))) {\n                if (val.replace) {\n                    val = val.replace(/[^0-9.-]/g, \"\");\n                } else return 0;\n            }\n            return parseFloat(val);\n        };\n    }\n}"
  }
]